{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/fatima/HelpMe/Frontend/navigation/UserTypeNav.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from \"react\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport ClientTabNavigator from \"./ClientTabNavigator\";\nimport ProviderTabNavigator from \"./ProviderTabNavigator\";\nimport AuthStack from \"./AuthStack\";\nimport { useContext } from \"react\";\nimport TypeContext from \"../usertype/context\";\nimport typeStorage from \"../usertype/storage\";\nvar Stack = createStackNavigator();\n\nvar UserTypeNav = function UserTypeNav() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useContext = useContext(TypeContext),\n      usertype = _useContext.usertype,\n      setUserType = _useContext.setUserType;\n\n  console.log(TypeContext);\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      type = _useState4[0],\n      setType = _useState4[1];\n\n  var restoreType = function restoreType() {\n    var usertype;\n    return _regeneratorRuntime.async(function restoreType$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setLoading(true);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(typeStorage.getUserType());\n\n          case 3:\n            usertype = _context.sent;\n            setUserType(usertype);\n            setType(usertype);\n            setLoading(false);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (!type) {\n    useEffect(function () {\n      restoreType();\n    }, []);\n  }\n\n  if (loading) {\n    return React.createElement(ActivityIndicator, {\n      visible: loading,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 12\n      }\n    });\n  } else {\n    if (type == 0) {\n      return React.createElement(Stack.Navigator, {\n        initialRouteName: \"ClientTabNavigator\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }\n      }, React.createElement(Stack.Screen, {\n        name: \"ClientTabNavigator\",\n        component: ClientTabNavigator,\n        options: {\n          headerShown: false\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }\n      }), React.createElement(Stack.Screen, {\n        name: \"AuthStack\",\n        component: AuthStack,\n        options: {\n          headerShown: false\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    if (type == 1) {\n      return React.createElement(Stack.Navigator, {\n        initialRouteName: \"ProviderTabNavigator\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }\n      }, React.createElement(Stack.Screen, {\n        name: \"ProviderTabNavigator\",\n        component: ProviderTabNavigator,\n        options: {\n          headerShown: false\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      }), React.createElement(Stack.Screen, {\n        name: \"AuthStack\",\n        component: AuthStack,\n        options: {\n          headerShown: false\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }\n      }));\n    }\n  }\n};\n\nexport default UserTypeNav;","map":{"version":3,"sources":["/home/fatima/HelpMe/Frontend/navigation/UserTypeNav.js"],"names":["React","useEffect","useState","createStackNavigator","ClientTabNavigator","ProviderTabNavigator","AuthStack","useContext","TypeContext","typeStorage","Stack","UserTypeNav","loading","setLoading","usertype","setUserType","console","log","type","setType","restoreType","getUserType","headerShown"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { ActivityIndicator } from \"react-native\";\nimport ClientTabNavigator from \"./ClientTabNavigator\";\nimport ProviderTabNavigator from \"./ProviderTabNavigator\";\nimport AuthStack from \"./AuthStack\";\nimport { useContext } from \"react\";\nimport TypeContext from \"../usertype/context\";\nimport typeStorage from \"../usertype/storage\";\n\nconst Stack = createStackNavigator();\n\nconst UserTypeNav = () => {\n  const [loading, setLoading] = useState(true);\n\n  const { usertype, setUserType } = useContext(TypeContext);\n  console.log(TypeContext);\n  const [type, setType] = useState();\n  const restoreType = async () => {\n    setLoading(true);\n    const usertype = await typeStorage.getUserType();\n    // if (!usertype) return console.log(\"fashal bestie kys <3\");\n    setUserType(usertype);\n    setType(usertype);\n    setLoading(false);\n  };\n\n  if (!type) {\n    useEffect(() => {\n      restoreType();\n    }, []);\n  }\n\n  if (loading) {\n    return <ActivityIndicator visible={loading} />;\n  } else {\n    if (type == 0) {\n      return (\n        <Stack.Navigator initialRouteName=\"ClientTabNavigator\">\n          <Stack.Screen\n            name=\"ClientTabNavigator\"\n            component={ClientTabNavigator}\n            options={{ headerShown: false }}\n          />\n          <Stack.Screen\n            name=\"AuthStack\"\n            component={AuthStack}\n            options={{ headerShown: false }}\n          />\n        </Stack.Navigator>\n      );\n    }\n    if (type == 1) {\n      return (\n        <Stack.Navigator initialRouteName=\"ProviderTabNavigator\">\n          <Stack.Screen\n            name=\"ProviderTabNavigator\"\n            component={ProviderTabNavigator}\n            options={{ headerShown: false }}\n          />\n          <Stack.Screen\n            name=\"AuthStack\"\n            component={AuthStack}\n            options={{ headerShown: false }}\n          />\n        </Stack.Navigator>\n      );\n    }\n  }\n};\n\nexport default UserTypeNav;\n"]},"metadata":{},"sourceType":"module"}