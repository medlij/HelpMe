{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/fatima/HelpMe/Frontend/Screens/LoginScreen.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, createRef } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport axios from \"axios\";\nimport colors from \"../config/colors\";\nimport ErrorMessage from \"../components/ErrorMessage\";\n\nvar LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      errortext = _useState6[0],\n      setErrortext = _useState6[1];\n\n  var passwordInputRef = createRef();\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      token = _useState8[0],\n      setToken = _useState8[1];\n\n  var handleSubmitPress = function handleSubmitPress() {\n    var data;\n    return _regeneratorRuntime.async(function handleSubmitPress$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (email) {\n              _context.next = 3;\n              break;\n            }\n\n            setErrortext(\"Email field cannot be empty\");\n            return _context.abrupt(\"return\");\n\n          case 3:\n            if (password) {\n              _context.next = 6;\n              break;\n            }\n\n            setErrortext(\"Password field cannot be empty\");\n            return _context.abrupt(\"return\");\n\n          case 6:\n            data = {\n              email: email,\n              password: password\n            };\n            axios.post(\"http://034fdb954375.ngrok.io/api/login\", data).then(function (response) {\n              if (response.status === 200) {\n                setToken(response.data.token);\n                navigation.replace(\"UserTypeNav\", {\n                  usertype: response.data.is_provider,\n                  token: response.data.token\n                });\n              }\n            }).catch(function (error) {\n              console.log(\"the error is\", error);\n              setErrortext(\"Invalid Email and Password\");\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.header,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, \"Login\"), React.createElement(TextInput, {\n    style: styles.inputBox,\n    onChangeText: function onChangeText(email) {\n      return setEmail(email);\n    },\n    placeholder: \"Enter Email\",\n    placeholderTextColor: colors.text_holder,\n    autoCapitalize: \"none\",\n    keyboardType: \"email-address\",\n    returnKeyType: \"next\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), React.createElement(TextInput, {\n    style: styles.inputBox,\n    onChangeText: (function (password) {\n      return setPassword(password);\n    }, setErrortext),\n    placeholder: \"Enter Password\",\n    placeholderTextColor: colors.text_holder,\n    keyboardType: \"default\",\n    ref: passwordInputRef,\n    secureTextEntry: true,\n    returnKeyType: \"next\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), React.createElement(ErrorMessage, {\n    error: errortext,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: handleSubmitPress,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, \"Submit\")), React.createElement(Text, {\n    style: {\n      fontSize: 16,\n      color: colors.black,\n      marginBottom: 10\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, \"Don't have an account?\"), React.createElement(TouchableOpacity, {\n    style: styles.link,\n    onPress: function onPress() {\n      return navigation.navigate(\"SignupScreen\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.link,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \"Signup\")));\n};\n\nexport default LoginScreen;\nvar styles = StyleSheet.create({\n  button: {\n    backgroundColor: colors.myblue,\n    width: 100,\n    marginVertical: 10,\n    height: 50,\n    marginBottom: 30,\n    marginTop: 30,\n    justifyContent: \"center\"\n  },\n  buttonText: {\n    fontSize: 16,\n    fontWeight: \"bold\",\n    color: colors.white,\n    textAlign: \"center\"\n  },\n  container: {\n    backgroundColor: colors.white,\n    padding: 40,\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  error: {\n    color: \"red\",\n    textAlign: \"center\",\n    fontSize: 14\n  },\n  header: {\n    fontSize: 40,\n    color: colors.myblue,\n    marginBottom: 30,\n    fontWeight: \"bold\"\n  },\n  inputBox: {\n    width: \"80%\",\n    backgroundColor: colors.white,\n    borderWidth: 1,\n    borderColor: colors.black,\n    paddingHorizontal: 16,\n    fontSize: 16,\n    color: colors.white,\n    marginVertical: 10,\n    height: 50,\n    marginBottom: 20,\n    color: colors.black\n  },\n  link: {\n    backgroundColor: colors.white,\n    textAlign: \"center\",\n    color: colors.myblue,\n    fontWeight: \"bold\",\n    fontSize: 18\n  }\n});","map":{"version":3,"sources":["/home/fatima/HelpMe/Frontend/Screens/LoginScreen.js"],"names":["React","useState","createRef","axios","colors","ErrorMessage","LoginScreen","navigation","email","setEmail","password","setPassword","errortext","setErrortext","passwordInputRef","token","setToken","handleSubmitPress","data","post","then","response","status","replace","usertype","is_provider","catch","error","console","log","styles","container","header","inputBox","text_holder","button","buttonText","fontSize","color","black","marginBottom","link","navigate","StyleSheet","create","backgroundColor","myblue","width","marginVertical","height","marginTop","justifyContent","fontWeight","white","textAlign","padding","flex","alignItems","borderWidth","borderColor","paddingHorizontal"],"mappings":"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","sourcesContent":["import React, { useState, createRef } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TextInput,\n  TouchableOpacity,\n} from \"react-native\";\nimport axios from \"axios\";\nimport colors from \"../config/colors\";\nimport ErrorMessage from \"../components/ErrorMessage\";\n\nconst LoginScreen = ({ navigation }) => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errortext, setErrortext] = useState(\"\");\n  const passwordInputRef = createRef();\n  const [token, setToken] = useState();\n\n  const handleSubmitPress = async () => {\n    if (!email) {\n      setErrortext(\"Email field cannot be empty\");\n      return;\n    }\n    if (!password) {\n      setErrortext(\"Password field cannot be empty\");\n      return;\n    }\n\n    let data = {\n      email: email,\n      password: password,\n    };\n\n    axios\n      .post(\"http://034fdb954375.ngrok.io/api/login\", data)\n      .then((response) => {\n        if (response.status === 200) {\n          setToken(response.data.token);\n          navigation.replace(\"UserTypeNav\", {\n            usertype: response.data.is_provider,\n            token: response.data.token,\n          });\n        }\n      })\n      .catch((error) => {\n        console.log(\"the error is\", error);\n        setErrortext(\"Invalid Email and Password\");\n      });\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.header}>Login</Text>\n      <TextInput\n        style={styles.inputBox}\n        onChangeText={(email) => setEmail(email)}\n        placeholder=\"Enter Email\"\n        placeholderTextColor={colors.text_holder}\n        autoCapitalize=\"none\"\n        keyboardType=\"email-address\"\n        returnKeyType=\"next\"\n      />\n      <TextInput\n        style={styles.inputBox}\n        onChangeText={((password) => setPassword(password), setErrortext)}\n        placeholder=\"Enter Password\"\n        placeholderTextColor={colors.text_holder}\n        keyboardType=\"default\"\n        ref={passwordInputRef}\n        secureTextEntry\n        returnKeyType=\"next\"\n      />\n      <ErrorMessage error={errortext} />\n      <TouchableOpacity style={styles.button} onPress={handleSubmitPress}>\n        <Text style={styles.buttonText}>Submit</Text>\n      </TouchableOpacity>\n      <Text style={{ fontSize: 16, color: colors.black, marginBottom: 10 }}>\n        Don't have an account?\n      </Text>\n      <TouchableOpacity\n        style={styles.link}\n        onPress={() => navigation.navigate(\"SignupScreen\")}\n      >\n        <Text style={styles.link}>Signup</Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\nexport default LoginScreen;\n\nconst styles = StyleSheet.create({\n  button: {\n    backgroundColor: colors.myblue,\n    width: 100,\n    marginVertical: 10,\n    height: 50,\n    marginBottom: 30,\n    marginTop: 30,\n    justifyContent: \"center\",\n  },\n  buttonText: {\n    fontSize: 16,\n    fontWeight: \"bold\",\n    color: colors.white,\n    textAlign: \"center\",\n  },\n  container: {\n    backgroundColor: colors.white,\n    padding: 40,\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  error: {\n    color: \"red\",\n    textAlign: \"center\",\n    fontSize: 14,\n  },\n  header: {\n    fontSize: 40,\n    color: colors.myblue,\n    marginBottom: 30,\n    fontWeight: \"bold\",\n  },\n  inputBox: {\n    width: \"80%\",\n    backgroundColor: colors.white,\n    borderWidth: 1,\n    borderColor: colors.black,\n    paddingHorizontal: 16,\n    fontSize: 16,\n    color: colors.white,\n    marginVertical: 10,\n    height: 50,\n    marginBottom: 20,\n    color: colors.black,\n  },\n  link: {\n    backgroundColor: colors.white,\n    textAlign: \"center\",\n    color: colors.myblue,\n    fontWeight: \"bold\",\n    fontSize: 18,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}