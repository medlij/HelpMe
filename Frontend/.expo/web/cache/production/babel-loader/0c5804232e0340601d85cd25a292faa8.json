{"ast":null,"code":"import{canUseDOM}from'fbjs/lib/ExecutionEnvironment';var focusVisibleAttributeName='data-focusvisible-polyfill';var rule=\":focus:not([\"+focusVisibleAttributeName+\"]){outline: none;}\";var modality=function modality(insertRule){insertRule(rule);if(!canUseDOM){return;}var hadKeyboardEvent=true;var hadFocusVisibleRecently=false;var hadFocusVisibleRecentlyTimeout=null;var inputTypesWhitelist={text:true,search:true,url:true,tel:true,email:true,password:true,number:true,date:true,month:true,week:true,time:true,datetime:true,'datetime-local':true};function isValidFocusTarget(el){if(el&&el!==document&&el.nodeName!=='HTML'&&el.nodeName!=='BODY'&&'classList'in el&&'contains'in el.classList){return true;}return false;}function focusTriggersKeyboardModality(el){var type=el.type;var tagName=el.tagName;var isReadOnly=el.readOnly;if(tagName==='INPUT'&&inputTypesWhitelist[type]&&!isReadOnly){return true;}if(tagName==='TEXTAREA'&&!isReadOnly){return true;}if(el.isContentEditable){return true;}return false;}function addFocusVisibleAttribute(el){if(el.hasAttribute(focusVisibleAttributeName)){return;}el.setAttribute(focusVisibleAttributeName,true);}function removeFocusVisibleAttribute(el){el.removeAttribute(focusVisibleAttributeName);}function removeAllFocusVisibleAttributes(){var list=document.querySelectorAll(\"[\"+focusVisibleAttributeName+\"]\");for(var i=0;i<list.length;i+=1){removeFocusVisibleAttribute(list[i]);}}function onKeyDown(e){if(e.key!=='Tab'&&(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)){return;}if(isValidFocusTarget(document.activeElement)){addFocusVisibleAttribute(document.activeElement);}hadKeyboardEvent=true;}function onPointerDown(e){if(hadKeyboardEvent===true){removeAllFocusVisibleAttributes();}hadKeyboardEvent=false;}function onFocus(e){if(!isValidFocusTarget(e.target)){return;}if(hadKeyboardEvent||focusTriggersKeyboardModality(e.target)){addFocusVisibleAttribute(e.target);}}function onBlur(e){if(!isValidFocusTarget(e.target)){return;}if(e.target.hasAttribute(focusVisibleAttributeName)){hadFocusVisibleRecently=true;window.clearTimeout(hadFocusVisibleRecentlyTimeout);hadFocusVisibleRecentlyTimeout=window.setTimeout(function(){hadFocusVisibleRecently=false;window.clearTimeout(hadFocusVisibleRecentlyTimeout);},100);removeFocusVisibleAttribute(e.target);}}function onVisibilityChange(e){if(document.visibilityState==='hidden'){if(hadFocusVisibleRecently){hadKeyboardEvent=true;}addInitialPointerMoveListeners();}}function addInitialPointerMoveListeners(){document.addEventListener('mousemove',onInitialPointerMove);document.addEventListener('mousedown',onInitialPointerMove);document.addEventListener('mouseup',onInitialPointerMove);document.addEventListener('pointermove',onInitialPointerMove);document.addEventListener('pointerdown',onInitialPointerMove);document.addEventListener('pointerup',onInitialPointerMove);document.addEventListener('touchmove',onInitialPointerMove);document.addEventListener('touchstart',onInitialPointerMove);document.addEventListener('touchend',onInitialPointerMove);}function removeInitialPointerMoveListeners(){document.removeEventListener('mousemove',onInitialPointerMove);document.removeEventListener('mousedown',onInitialPointerMove);document.removeEventListener('mouseup',onInitialPointerMove);document.removeEventListener('pointermove',onInitialPointerMove);document.removeEventListener('pointerdown',onInitialPointerMove);document.removeEventListener('pointerup',onInitialPointerMove);document.removeEventListener('touchmove',onInitialPointerMove);document.removeEventListener('touchstart',onInitialPointerMove);document.removeEventListener('touchend',onInitialPointerMove);}function onInitialPointerMove(e){if(e.target.nodeName==='HTML'){return;}hadKeyboardEvent=false;removeInitialPointerMoveListeners();}document.addEventListener('keydown',onKeyDown,true);document.addEventListener('mousedown',onPointerDown,true);document.addEventListener('pointerdown',onPointerDown,true);document.addEventListener('touchstart',onPointerDown,true);document.addEventListener('focus',onFocus,true);document.addEventListener('blur',onBlur,true);document.addEventListener('visibilitychange',onVisibilityChange,true);addInitialPointerMoveListeners();};export default modality;","map":{"version":3,"sources":["/home/fatima/HelpMe/Frontend/node_modules/react-native-web/src/exports/StyleSheet/modality.js"],"names":["canUseDOM","focusVisibleAttributeName","rule","modality","insertRule","hadKeyboardEvent","hadFocusVisibleRecently","hadFocusVisibleRecentlyTimeout","inputTypesWhitelist","text","search","url","tel","email","password","number","date","month","week","time","datetime","isValidFocusTarget","el","document","nodeName","classList","focusTriggersKeyboardModality","type","tagName","isReadOnly","readOnly","isContentEditable","addFocusVisibleAttribute","hasAttribute","setAttribute","removeFocusVisibleAttribute","removeAttribute","removeAllFocusVisibleAttributes","list","querySelectorAll","i","length","onKeyDown","e","key","metaKey","altKey","ctrlKey","shiftKey","activeElement","onPointerDown","onFocus","target","onBlur","window","clearTimeout","setTimeout","onVisibilityChange","visibilityState","addInitialPointerMoveListeners","addEventListener","onInitialPointerMove","removeInitialPointerMoveListeners","removeEventListener"],"mappings":"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","sourcesContent":["/**\n * Adapts focus styles based on the user's active input modality (i.e., how\n * they are interacting with the UI right now).\n *\n * Focus styles are only relevant when using the keyboard to interact with the\n * page. If we only show the focus ring when relevant, we can avoid user\n * confusion without compromising accessibility.\n *\n * The script uses two heuristics to determine whether the keyboard is being used:\n *\n * 1. a keydown event occurred immediately before a focus event;\n * 2. a focus event happened on an element which requires keyboard interaction (e.g., a text field);\n *\n * This software or document includes material copied from or derived from https://github.com/WICG/focus-visible.\n * Copyright © 2018 W3C® (MIT, ERCIM, Keio, Beihang).\n * W3C Software Notice and License: https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n * @noflow\n */\n\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\n\nconst focusVisibleAttributeName = 'data-focusvisible-polyfill';\n\nconst rule = `:focus:not([${focusVisibleAttributeName}]){outline: none;}`;\n\nconst modality = insertRule => {\n  insertRule(rule);\n\n  if (!canUseDOM) {\n    return;\n  }\n\n  let hadKeyboardEvent = true;\n  let hadFocusVisibleRecently = false;\n  let hadFocusVisibleRecentlyTimeout = null;\n\n  const inputTypesWhitelist = {\n    text: true,\n    search: true,\n    url: true,\n    tel: true,\n    email: true,\n    password: true,\n    number: true,\n    date: true,\n    month: true,\n    week: true,\n    time: true,\n    datetime: true,\n    'datetime-local': true\n  };\n\n  /**\n   * Helper function for legacy browsers and iframes which sometimes focus\n   * elements like document, body, and non-interactive SVG.\n   */\n  function isValidFocusTarget(el) {\n    if (\n      el &&\n      el !== document &&\n      el.nodeName !== 'HTML' &&\n      el.nodeName !== 'BODY' &&\n      'classList' in el &&\n      'contains' in el.classList\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Computes whether the given element should automatically trigger the\n   * `focus-visible` attribute being added, i.e. whether it should always match\n   * `:focus-visible` when focused.\n   */\n  function focusTriggersKeyboardModality(el) {\n    const type = el.type;\n    const tagName = el.tagName;\n    const isReadOnly = el.readOnly;\n\n    if (tagName === 'INPUT' && inputTypesWhitelist[type] && !isReadOnly) {\n      return true;\n    }\n\n    if (tagName === 'TEXTAREA' && !isReadOnly) {\n      return true;\n    }\n\n    if (el.isContentEditable) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Add the `focus-visible` attribute to the given element if it was not added by\n   * the author.\n   */\n  function addFocusVisibleAttribute(el) {\n    if (el.hasAttribute(focusVisibleAttributeName)) {\n      return;\n    }\n    el.setAttribute(focusVisibleAttributeName, true);\n  }\n\n  /**\n   * Remove the `focus-visible` attribute from the given element if it was not\n   * originally added by the author.\n   */\n  function removeFocusVisibleAttribute(el) {\n    el.removeAttribute(focusVisibleAttributeName);\n  }\n\n  /**\n   * Remove the `focus-visible` attribute from all elements in the document.\n   */\n  function removeAllFocusVisibleAttributes() {\n    const list = document.querySelectorAll(`[${focusVisibleAttributeName}]`);\n    for (let i = 0; i < list.length; i += 1) {\n      removeFocusVisibleAttribute(list[i]);\n    }\n  }\n\n  /**\n   * Treat `keydown` as a signal that the user is in keyboard modality.\n   * Apply `focus-visible` to any current active element and keep track\n   * of our keyboard modality state with `hadKeyboardEvent`.\n   */\n  function onKeyDown(e) {\n    if (e.key !== 'Tab' && (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey)) {\n      return;\n    }\n\n    if (isValidFocusTarget(document.activeElement)) {\n      addFocusVisibleAttribute(document.activeElement);\n    }\n\n    hadKeyboardEvent = true;\n  }\n\n  /**\n   * If at any point a user clicks with a pointing device, ensure that we change\n   * the modality away from keyboard.\n   * This avoids the situation where a user presses a key on an already focused\n   * element, and then clicks on a different element, focusing it with a\n   * pointing device, while we still think we're in keyboard modality.\n   * It also avoids the situation where a user presses on an element within a\n   * previously keyboard-focused element (i.e., `e.target` is not the previously\n   * focused element, but one of its descendants) and we need to remove the\n   * focus ring because a `blur` event doesn't occur.\n   */\n  function onPointerDown(e) {\n    if (hadKeyboardEvent === true) {\n      removeAllFocusVisibleAttributes();\n    }\n    hadKeyboardEvent = false;\n  }\n\n  /**\n   * On `focus`, add the `focus-visible` attribute to the target if:\n   * - the target received focus as a result of keyboard navigation, or\n   * - the event target is an element that will likely require interaction\n   *   via the keyboard (e.g. a text box)\n   */\n  function onFocus(e) {\n    // Prevent IE from focusing the document or HTML element.\n    if (!isValidFocusTarget(e.target)) {\n      return;\n    }\n\n    if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) {\n      addFocusVisibleAttribute(e.target);\n    }\n  }\n\n  /**\n   * On `blur`, remove the `focus-visible` attribute from the target.\n   */\n  function onBlur(e) {\n    if (!isValidFocusTarget(e.target)) {\n      return;\n    }\n\n    if (e.target.hasAttribute(focusVisibleAttributeName)) {\n      // To detect a tab/window switch, we look for a blur event followed\n      // rapidly by a visibility change.\n      // If we don't see a visibility change within 100ms, it's probably a\n      // regular focus change.\n      hadFocusVisibleRecently = true;\n      window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n      hadFocusVisibleRecentlyTimeout = window.setTimeout(function() {\n        hadFocusVisibleRecently = false;\n        window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n      }, 100);\n      removeFocusVisibleAttribute(e.target);\n    }\n  }\n\n  /**\n   * If the user changes tabs, keep track of whether or not the previously\n   * focused element had the focus-visible attribute.\n   */\n  function onVisibilityChange(e) {\n    if (document.visibilityState === 'hidden') {\n      // If the tab becomes active again, the browser will handle calling focus\n      // on the element (Safari actually calls it twice).\n      // If this tab change caused a blur on an element with focus-visible,\n      // re-apply the attribute when the user switches back to the tab.\n      if (hadFocusVisibleRecently) {\n        hadKeyboardEvent = true;\n      }\n      addInitialPointerMoveListeners();\n    }\n  }\n\n  /**\n   * Add a group of listeners to detect usage of any pointing devices.\n   * These listeners will be added when the polyfill first loads, and anytime\n   * the window is blurred, so that they are active when the window regains\n   * focus.\n   */\n  function addInitialPointerMoveListeners() {\n    document.addEventListener('mousemove', onInitialPointerMove);\n    document.addEventListener('mousedown', onInitialPointerMove);\n    document.addEventListener('mouseup', onInitialPointerMove);\n    document.addEventListener('pointermove', onInitialPointerMove);\n    document.addEventListener('pointerdown', onInitialPointerMove);\n    document.addEventListener('pointerup', onInitialPointerMove);\n    document.addEventListener('touchmove', onInitialPointerMove);\n    document.addEventListener('touchstart', onInitialPointerMove);\n    document.addEventListener('touchend', onInitialPointerMove);\n  }\n\n  function removeInitialPointerMoveListeners() {\n    document.removeEventListener('mousemove', onInitialPointerMove);\n    document.removeEventListener('mousedown', onInitialPointerMove);\n    document.removeEventListener('mouseup', onInitialPointerMove);\n    document.removeEventListener('pointermove', onInitialPointerMove);\n    document.removeEventListener('pointerdown', onInitialPointerMove);\n    document.removeEventListener('pointerup', onInitialPointerMove);\n    document.removeEventListener('touchmove', onInitialPointerMove);\n    document.removeEventListener('touchstart', onInitialPointerMove);\n    document.removeEventListener('touchend', onInitialPointerMove);\n  }\n\n  /**\n   * When the polfyill first loads, assume the user is in keyboard modality.\n   * If any event is received from a pointing device (e.g. mouse, pointer,\n   * touch), turn off keyboard modality.\n   * This accounts for situations where focus enters the page from the URL bar.\n   */\n  function onInitialPointerMove(e) {\n    // Work around a Safari quirk that fires a mousemove on <html> whenever the\n    // window blurs, even if you're tabbing out of the page. ¯\\_(ツ)_/¯\n    if (e.target.nodeName === 'HTML') {\n      return;\n    }\n\n    hadKeyboardEvent = false;\n    removeInitialPointerMoveListeners();\n  }\n\n  document.addEventListener('keydown', onKeyDown, true);\n  document.addEventListener('mousedown', onPointerDown, true);\n  document.addEventListener('pointerdown', onPointerDown, true);\n  document.addEventListener('touchstart', onPointerDown, true);\n  document.addEventListener('focus', onFocus, true);\n  document.addEventListener('blur', onBlur, true);\n  document.addEventListener('visibilitychange', onVisibilityChange, true);\n  addInitialPointerMoveListeners();\n};\n\nexport default modality;\n"]},"metadata":{},"sourceType":"module"}