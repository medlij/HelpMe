{"ast":null,"code":"import{isStartish,isMoveish,isEndish}from\"./ResponderEventTypes\";var __DEV__=process.env.NODE_ENV!=='production';var MAX_TOUCH_BANK=20;var touchBank=[];var touchHistory={touchBank:touchBank,numberActiveTouches:0,indexOfSingleActiveTouch:-1,mostRecentTimeStamp:0};function timestampForTouch(touch){return touch.timeStamp||touch.timestamp;}function createTouchRecord(touch){return{touchActive:true,startPageX:touch.pageX,startPageY:touch.pageY,startTimeStamp:timestampForTouch(touch),currentPageX:touch.pageX,currentPageY:touch.pageY,currentTimeStamp:timestampForTouch(touch),previousPageX:touch.pageX,previousPageY:touch.pageY,previousTimeStamp:timestampForTouch(touch)};}function resetTouchRecord(touchRecord,touch){touchRecord.touchActive=true;touchRecord.startPageX=touch.pageX;touchRecord.startPageY=touch.pageY;touchRecord.startTimeStamp=timestampForTouch(touch);touchRecord.currentPageX=touch.pageX;touchRecord.currentPageY=touch.pageY;touchRecord.currentTimeStamp=timestampForTouch(touch);touchRecord.previousPageX=touch.pageX;touchRecord.previousPageY=touch.pageY;touchRecord.previousTimeStamp=timestampForTouch(touch);}function getTouchIdentifier(_ref){var identifier=_ref.identifier;if(identifier==null){console.error('Touch object is missing identifier.');}if(__DEV__){if(identifier>MAX_TOUCH_BANK){console.error('Touch identifier %s is greater than maximum supported %s which causes '+'performance issues backfilling array locations for all of the indices.',identifier,MAX_TOUCH_BANK);}}return identifier;}function recordTouchStart(touch){var identifier=getTouchIdentifier(touch);var touchRecord=touchBank[identifier];if(touchRecord){resetTouchRecord(touchRecord,touch);}else{touchBank[identifier]=createTouchRecord(touch);}touchHistory.mostRecentTimeStamp=timestampForTouch(touch);}function recordTouchMove(touch){var touchRecord=touchBank[getTouchIdentifier(touch)];if(touchRecord){touchRecord.touchActive=true;touchRecord.previousPageX=touchRecord.currentPageX;touchRecord.previousPageY=touchRecord.currentPageY;touchRecord.previousTimeStamp=touchRecord.currentTimeStamp;touchRecord.currentPageX=touch.pageX;touchRecord.currentPageY=touch.pageY;touchRecord.currentTimeStamp=timestampForTouch(touch);touchHistory.mostRecentTimeStamp=timestampForTouch(touch);}else{console.warn('Cannot record touch move without a touch start.\\n',\"Touch Move: \"+printTouch(touch)+\"\\n\",\"Touch Bank: \"+printTouchBank());}}function recordTouchEnd(touch){var touchRecord=touchBank[getTouchIdentifier(touch)];if(touchRecord){touchRecord.touchActive=false;touchRecord.previousPageX=touchRecord.currentPageX;touchRecord.previousPageY=touchRecord.currentPageY;touchRecord.previousTimeStamp=touchRecord.currentTimeStamp;touchRecord.currentPageX=touch.pageX;touchRecord.currentPageY=touch.pageY;touchRecord.currentTimeStamp=timestampForTouch(touch);touchHistory.mostRecentTimeStamp=timestampForTouch(touch);}else{console.warn('Cannot record touch end without a touch start.\\n',\"Touch End: \"+printTouch(touch)+\"\\n\",\"Touch Bank: \"+printTouchBank());}}function printTouch(touch){return JSON.stringify({identifier:touch.identifier,pageX:touch.pageX,pageY:touch.pageY,timestamp:timestampForTouch(touch)});}function printTouchBank(){var printed=JSON.stringify(touchBank.slice(0,MAX_TOUCH_BANK));if(touchBank.length>MAX_TOUCH_BANK){printed+=' (original size: '+touchBank.length+')';}return printed;}var ResponderTouchHistoryStore={recordTouchTrack:function recordTouchTrack(topLevelType,nativeEvent){if(isMoveish(topLevelType)){nativeEvent.changedTouches.forEach(recordTouchMove);}else if(isStartish(topLevelType)){nativeEvent.changedTouches.forEach(recordTouchStart);touchHistory.numberActiveTouches=nativeEvent.touches.length;if(touchHistory.numberActiveTouches===1){touchHistory.indexOfSingleActiveTouch=nativeEvent.touches[0].identifier;}}else if(isEndish(topLevelType)){nativeEvent.changedTouches.forEach(recordTouchEnd);touchHistory.numberActiveTouches=nativeEvent.touches.length;if(touchHistory.numberActiveTouches===1){for(var i=0;i<touchBank.length;i++){var touchTrackToCheck=touchBank[i];if(touchTrackToCheck!=null&&touchTrackToCheck.touchActive){touchHistory.indexOfSingleActiveTouch=i;break;}}if(__DEV__){var activeRecord=touchBank[touchHistory.indexOfSingleActiveTouch];if(!(activeRecord!=null&&activeRecord.touchActive)){console.error('Cannot find single active touch.');}}}}},touchHistory:touchHistory};export default ResponderTouchHistoryStore;","map":{"version":3,"sources":["/home/fatima/HelpMe/Frontend/node_modules/react-native-web/src/hooks/useResponderEvents/ResponderTouchHistoryStore.js"],"names":["isStartish","isMoveish","isEndish","__DEV__","process","env","NODE_ENV","MAX_TOUCH_BANK","touchBank","touchHistory","numberActiveTouches","indexOfSingleActiveTouch","mostRecentTimeStamp","timestampForTouch","touch","timeStamp","timestamp","createTouchRecord","touchActive","startPageX","pageX","startPageY","pageY","startTimeStamp","currentPageX","currentPageY","currentTimeStamp","previousPageX","previousPageY","previousTimeStamp","resetTouchRecord","touchRecord","getTouchIdentifier","identifier","console","error","recordTouchStart","recordTouchMove","warn","printTouch","printTouchBank","recordTouchEnd","JSON","stringify","printed","slice","length","ResponderTouchHistoryStore","recordTouchTrack","topLevelType","nativeEvent","changedTouches","forEach","touches","i","touchTrackToCheck","activeRecord"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type { Touch, TouchEvent } from './ResponderEventTypes';\nimport { isStartish, isMoveish, isEndish } from './ResponderEventTypes';\n\ntype TouchRecord = {|\n  touchActive: boolean,\n  startPageX: number,\n  startPageY: number,\n  startTimeStamp: number,\n  currentPageX: number,\n  currentPageY: number,\n  currentTimeStamp: number,\n  previousPageX: number,\n  previousPageY: number,\n  previousTimeStamp: number\n|};\n\n/**\n * Tracks the position and time of each active touch by `touch.identifier`. We\n * should typically only see IDs in the range of 1-20 because IDs get recycled\n * when touches end and start again.\n */\n\nconst __DEV__ = process.env.NODE_ENV !== 'production';\nconst MAX_TOUCH_BANK = 20;\nconst touchBank: Array<TouchRecord> = [];\nconst touchHistory = {\n  touchBank,\n  numberActiveTouches: 0,\n  // If there is only one active touch, we remember its location. This prevents\n  // us having to loop through all of the touches all the time in the most\n  // common case.\n  indexOfSingleActiveTouch: -1,\n  mostRecentTimeStamp: 0\n};\n\nfunction timestampForTouch(touch: Touch): number {\n  // The legacy internal implementation provides \"timeStamp\", which has been\n  // renamed to \"timestamp\".\n  return (touch: any).timeStamp || touch.timestamp;\n}\n\n/**\n * TODO: Instead of making gestures recompute filtered velocity, we could\n * include a built in velocity computation that can be reused globally.\n */\nfunction createTouchRecord(touch: Touch): TouchRecord {\n  return {\n    touchActive: true,\n    startPageX: touch.pageX,\n    startPageY: touch.pageY,\n    startTimeStamp: timestampForTouch(touch),\n    currentPageX: touch.pageX,\n    currentPageY: touch.pageY,\n    currentTimeStamp: timestampForTouch(touch),\n    previousPageX: touch.pageX,\n    previousPageY: touch.pageY,\n    previousTimeStamp: timestampForTouch(touch)\n  };\n}\n\nfunction resetTouchRecord(touchRecord: TouchRecord, touch: Touch): void {\n  touchRecord.touchActive = true;\n  touchRecord.startPageX = touch.pageX;\n  touchRecord.startPageY = touch.pageY;\n  touchRecord.startTimeStamp = timestampForTouch(touch);\n  touchRecord.currentPageX = touch.pageX;\n  touchRecord.currentPageY = touch.pageY;\n  touchRecord.currentTimeStamp = timestampForTouch(touch);\n  touchRecord.previousPageX = touch.pageX;\n  touchRecord.previousPageY = touch.pageY;\n  touchRecord.previousTimeStamp = timestampForTouch(touch);\n}\n\nfunction getTouchIdentifier({ identifier }: Touch): number {\n  if (identifier == null) {\n    console.error('Touch object is missing identifier.');\n  }\n  if (__DEV__) {\n    if (identifier > MAX_TOUCH_BANK) {\n      console.error(\n        'Touch identifier %s is greater than maximum supported %s which causes ' +\n          'performance issues backfilling array locations for all of the indices.',\n        identifier,\n        MAX_TOUCH_BANK\n      );\n    }\n  }\n  return identifier;\n}\n\nfunction recordTouchStart(touch: Touch): void {\n  const identifier = getTouchIdentifier(touch);\n  const touchRecord = touchBank[identifier];\n  if (touchRecord) {\n    resetTouchRecord(touchRecord, touch);\n  } else {\n    touchBank[identifier] = createTouchRecord(touch);\n  }\n  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n}\n\nfunction recordTouchMove(touch: Touch): void {\n  const touchRecord = touchBank[getTouchIdentifier(touch)];\n  if (touchRecord) {\n    touchRecord.touchActive = true;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    console.warn(\n      'Cannot record touch move without a touch start.\\n',\n      `Touch Move: ${printTouch(touch)}\\n`,\n      `Touch Bank: ${printTouchBank()}`\n    );\n  }\n}\n\nfunction recordTouchEnd(touch: Touch): void {\n  const touchRecord = touchBank[getTouchIdentifier(touch)];\n  if (touchRecord) {\n    touchRecord.touchActive = false;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    console.warn(\n      'Cannot record touch end without a touch start.\\n',\n      `Touch End: ${printTouch(touch)}\\n`,\n      `Touch Bank: ${printTouchBank()}`\n    );\n  }\n}\n\nfunction printTouch(touch: Touch): string {\n  return JSON.stringify({\n    identifier: touch.identifier,\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    timestamp: timestampForTouch(touch)\n  });\n}\n\nfunction printTouchBank(): string {\n  let printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));\n  if (touchBank.length > MAX_TOUCH_BANK) {\n    printed += ' (original size: ' + touchBank.length + ')';\n  }\n  return printed;\n}\n\nconst ResponderTouchHistoryStore = {\n  recordTouchTrack(topLevelType: string, nativeEvent: TouchEvent): void {\n    if (isMoveish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(recordTouchMove);\n    } else if (isStartish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(recordTouchStart);\n      touchHistory.numberActiveTouches = nativeEvent.touches.length;\n      if (touchHistory.numberActiveTouches === 1) {\n        touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;\n      }\n    } else if (isEndish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(recordTouchEnd);\n      touchHistory.numberActiveTouches = nativeEvent.touches.length;\n      if (touchHistory.numberActiveTouches === 1) {\n        for (let i = 0; i < touchBank.length; i++) {\n          const touchTrackToCheck = touchBank[i];\n          if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {\n            touchHistory.indexOfSingleActiveTouch = i;\n            break;\n          }\n        }\n        if (__DEV__) {\n          const activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];\n          if (!(activeRecord != null && activeRecord.touchActive)) {\n            console.error('Cannot find single active touch.');\n          }\n        }\n      }\n    }\n  },\n\n  touchHistory\n};\n\nexport default ResponderTouchHistoryStore;\n"]},"metadata":{},"sourceType":"module"}