{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import ExpoLocation from\"./ExpoLocation\";import{LocationEventEmitter}from\"./LocationEventEmitter\";var nextWatchId=0;var Subscriber=function(){function Subscriber(eventName,eventDataField){_classCallCheck(this,Subscriber);this.callbacks={};this.eventSubscription=null;this.eventName=eventName;this.eventDataField=eventDataField;}_createClass(Subscriber,[{key:\"maybeInitializeSubscription\",value:function maybeInitializeSubscription(){var _this=this;if(this.eventSubscription){return;}this.eventSubscription=LocationEventEmitter.addListener(this.eventName,function(event){return _this.trigger(event);});}},{key:\"registerCallback\",value:function registerCallback(callback){this.maybeInitializeSubscription();var id=++nextWatchId;this.callbacks[id]=callback;return id;}},{key:\"unregisterCallback\",value:function unregisterCallback(id){if(!this.callbacks[id]){return;}delete this.callbacks[id];ExpoLocation.removeWatchAsync(id);if(Object.keys(this.callbacks).length===0&&this.eventSubscription){LocationEventEmitter.removeSubscription(this.eventSubscription);this.eventSubscription=null;}}},{key:\"trigger\",value:function trigger(event){var watchId=event.watchId;var callback=this.callbacks[watchId];if(callback){callback(event[this.eventDataField]);}else{ExpoLocation.removeWatchAsync(watchId);}}}]);return Subscriber;}();export var LocationSubscriber=new Subscriber('Expo.locationChanged','location');export var HeadingSubscriber=new Subscriber('Expo.headingChanged','heading');export function _getCurrentWatchId(){return nextWatchId;}","map":{"version":3,"sources":["../src/LocationSubscribers.ts"],"names":[],"mappings":"gIAEA,MAAO,CAAA,YAAP,sBAEA,OAAS,oBAAT,8BAOA,GAAI,CAAA,WAAW,CAAG,CAAlB,C,GAEM,CAAA,U,YAMJ,oBAAY,SAAZ,CAA+B,cAA/B,CAAqD,kCAH7C,KAAA,SAAA,CAA4C,EAA5C,CACA,KAAA,iBAAA,CAAyC,IAAzC,CAGN,KAAK,SAAL,CAAiB,SAAjB,CACA,KAAK,cAAL,CAAsB,cAAtB,CACD,C,kEAED,sCAA2B,gBACzB,GAAI,KAAK,iBAAT,CAA4B,CAC1B,OACD,CACD,KAAK,iBAAL,CAAyB,oBAAoB,CAAC,WAArB,CACvB,KAAK,SADkB,CAEvB,SAAC,KAAD,QAAwB,CAAA,KAAI,CAAC,OAAL,CAAa,KAAb,CAAxB,EAFuB,CAAzB,CAID,C,gCAKD,0BAAiB,QAAjB,CAAuC,CACrC,KAAK,2BAAL,GACA,GAAM,CAAA,EAAE,CAAG,EAAE,WAAb,CACA,KAAK,SAAL,CAAe,EAAf,EAAqB,QAArB,CACA,MAAO,CAAA,EAAP,CACD,C,kCAKD,4BAAmB,EAAnB,CAA6B,CAE3B,GAAI,CAAC,KAAK,SAAL,CAAe,EAAf,CAAL,CAAyB,CACvB,OACD,CAED,MAAO,MAAK,SAAL,CAAe,EAAf,CAAP,CACA,YAAY,CAAC,gBAAb,CAA8B,EAA9B,EAEA,GAAI,MAAM,CAAC,IAAP,CAAY,KAAK,SAAjB,EAA4B,MAA5B,GAAuC,CAAvC,EAA4C,KAAK,iBAArD,CAAwE,CACtE,oBAAoB,CAAC,kBAArB,CAAwC,KAAK,iBAA7C,EACA,KAAK,iBAAL,CAAyB,IAAzB,CACD,CACF,C,uBAED,iBAAQ,KAAR,CAA0B,CACxB,GAAM,CAAA,OAAO,CAAG,KAAK,CAAC,OAAtB,CACA,GAAM,CAAA,QAAQ,CAAG,KAAK,SAAL,CAAe,OAAf,CAAjB,CAEA,GAAI,QAAJ,CAAc,CACZ,QAAQ,CAAC,KAAK,CAAC,KAAK,cAAN,CAAN,CAAR,CACD,CAFD,IAEO,CACL,YAAY,CAAC,gBAAb,CAA8B,OAA9B,EACD,CACF,C,0BAGH,MAAO,IAAM,CAAA,kBAAkB,CAAG,GAAI,CAAA,UAAJ,CAChC,sBADgC,CAEhC,UAFgC,CAA3B,CAIP,MAAO,IAAM,CAAA,iBAAiB,CAAG,GAAI,CAAA,UAAJ,CAC/B,qBAD+B,CAE/B,SAF+B,CAA1B,CAQP,MAAM,SAAU,CAAA,kBAAV,EAA4B,CAChC,MAAO,CAAA,WAAP,CACD","sourcesContent":["import { Subscription } from '@unimodules/core';\n\nimport ExpoLocation from './ExpoLocation';\nimport { LocationCallback, LocationHeadingCallback } from './Location.types';\nimport { LocationEventEmitter } from './LocationEventEmitter';\n\ntype EventObject = {\n  watchId: number;\n  [key: string]: any;\n};\n\nlet nextWatchId = 0;\n\nclass Subscriber<CallbackType extends LocationCallback | LocationHeadingCallback> {\n  private eventName: string;\n  private eventDataField: string;\n  private callbacks: { [id: string]: CallbackType } = {};\n  private eventSubscription: Subscription | null = null;\n\n  constructor(eventName: string, eventDataField: string) {\n    this.eventName = eventName;\n    this.eventDataField = eventDataField;\n  }\n\n  maybeInitializeSubscription() {\n    if (this.eventSubscription) {\n      return;\n    }\n    this.eventSubscription = LocationEventEmitter.addListener(\n      this.eventName,\n      (event: EventObject) => this.trigger(event)\n    );\n  }\n\n  /**\n   * Registers given callback under new id which is then returned.\n   */\n  registerCallback(callback: CallbackType): number {\n    this.maybeInitializeSubscription();\n    const id = ++nextWatchId;\n    this.callbacks[id] = callback;\n    return id;\n  }\n\n  /**\n   * Unregisters a callback with given id and revokes the subscription if possible.\n   */\n  unregisterCallback(id: number): void {\n    // Do nothing if we have already unregistered the callback.\n    if (!this.callbacks[id]) {\n      return;\n    }\n\n    delete this.callbacks[id];\n    ExpoLocation.removeWatchAsync(id);\n\n    if (Object.keys(this.callbacks).length === 0 && this.eventSubscription) {\n      LocationEventEmitter.removeSubscription(this.eventSubscription);\n      this.eventSubscription = null;\n    }\n  }\n\n  trigger(event: EventObject): void {\n    const watchId = event.watchId;\n    const callback = this.callbacks[watchId];\n\n    if (callback) {\n      callback(event[this.eventDataField]);\n    } else {\n      ExpoLocation.removeWatchAsync(watchId);\n    }\n  }\n}\n\nexport const LocationSubscriber = new Subscriber<LocationCallback>(\n  'Expo.locationChanged',\n  'location'\n);\nexport const HeadingSubscriber = new Subscriber<LocationHeadingCallback>(\n  'Expo.headingChanged',\n  'heading'\n);\n\n/**\n * Necessary for some unit tests.\n */\nexport function _getCurrentWatchId(): number {\n  return nextWatchId;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}