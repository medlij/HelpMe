{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import*as React from'react';import{forwardRef,useRef}from'react';import createElement from\"react-native-web/dist/exports/createElement\";import unstable_createElement from\"react-native-web/dist/exports/createElement\";import PickerItem from\"./PickerItem\";var myCreateElement=createElement||unstable_createElement;var Select=forwardRef(function(props,forwardedRef){return myCreateElement('select',props);});var Picker=forwardRef(function(props,forwardedRef){var enabled=props.enabled,onValueChange=props.onValueChange,selectedValue=props.selectedValue,itemStyle=props.itemStyle,mode=props.mode,prompt=props.prompt,dropdownIconColor=props.dropdownIconColor,other=_objectWithoutProperties(props,[\"enabled\",\"onValueChange\",\"selectedValue\",\"itemStyle\",\"mode\",\"prompt\",\"dropdownIconColor\"]);var hostRef=useRef(null);var handleChange=React.useCallback(function(e){var _e$target=e.target,selectedIndex=_e$target.selectedIndex,value=_e$target.value;if(onValueChange){onValueChange(value,selectedIndex);}},[onValueChange]);return React.createElement(Select,_extends({disabled:enabled===false?true:undefined,onChange:handleChange,ref:hostRef,value:selectedValue},other));});Picker.Item=PickerItem;export default Picker;","map":{"version":3,"sources":["/home/fatima/HelpMe/Frontend/node_modules/@react-native-picker/picker/js/Picker.web.js"],"names":["React","forwardRef","useRef","PickerItem","myCreateElement","createElement","unstable_createElement","Select","props","forwardedRef","Picker","enabled","onValueChange","selectedValue","itemStyle","mode","prompt","dropdownIconColor","other","hostRef","handleChange","useCallback","e","target","selectedIndex","value","undefined","Item"],"mappings":"0IAOA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAAQC,UAAR,CAAoBC,MAApB,KAAiC,OAAjC,C,uJAMA,MAAOC,CAAAA,UAAP,oBAmBA,GAAMC,CAAAA,eAAe,CAAGC,aAAa,EAAIC,sBAAzC,CAEA,GAAMC,CAAAA,MAAM,CAAGN,UAAU,CAAC,SAACO,KAAD,CAAaC,YAAb,QACxBL,CAAAA,eAAe,CAAC,QAAD,CAAWI,KAAX,CADS,EAAD,CAAzB,CAIA,GAAME,CAAAA,MAAmD,CAAGT,UAAU,CAGpE,SAACO,KAAD,CAAQC,YAAR,CAAyB,CACzB,GACEE,CAAAA,OADF,CASIH,KATJ,CACEG,OADF,CAEEC,aAFF,CASIJ,KATJ,CAEEI,aAFF,CAGEC,aAHF,CASIL,KATJ,CAGEK,aAHF,CAIEC,SAJF,CASIN,KATJ,CAIEM,SAJF,CAKEC,IALF,CASIP,KATJ,CAKEO,IALF,CAMEC,MANF,CASIR,KATJ,CAMEQ,MANF,CAOEC,iBAPF,CASIT,KATJ,CAOES,iBAPF,CAQKC,KARL,0BASIV,KATJ,8FAWA,GAAMW,CAAAA,OAAO,CAAGjB,MAAM,CAAC,IAAD,CAAtB,CAEA,GAAMkB,CAAAA,YAAY,CAAGpB,KAAK,CAACqB,WAAN,CACnB,SAACC,CAAD,CAAe,CACb,cAA+BA,CAAC,CAACC,MAAjC,CAAOC,aAAP,WAAOA,aAAP,CAAsBC,KAAtB,WAAsBA,KAAtB,CACA,GAAIb,aAAJ,CAAmB,CACjBA,aAAa,CAACa,KAAD,CAAQD,aAAR,CAAb,CACD,CACF,CANkB,CAOnB,CAACZ,aAAD,CAPmB,CAArB,CAUA,MAEE,qBAAC,MAAD,WACE,QAAQ,CAAED,OAAO,GAAK,KAAZ,CAAoB,IAApB,CAA2Be,SADvC,CAEE,QAAQ,CAAEN,YAFZ,CAGE,GAAG,CAAED,OAHP,CAIE,KAAK,CAAEN,aAJT,EAKMK,KALN,EAFF,CAUD,CArCqE,CAAtE,CAwCAR,MAAM,CAACiB,IAAP,CAAcxB,UAAd,CAEA,cAAeO,CAAAA,MAAf","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * @flow\n *\n */\n\nimport * as React from 'react';\nimport {forwardRef, useRef} from 'react';\nimport type {ViewProps} from 'react-native-web/src/exports/View/types';\nimport type {GenericStyleProp} from 'react-native-web/src/types';\nimport type {TextStyle} from 'react-native-web/src/exports/Text/types';\n// $FlowFixMe fallback for older react-native-web versions\nimport {createElement, unstable_createElement} from 'react-native';\nimport PickerItem from './PickerItem';\n\ntype PickerProps = {\n  ...ViewProps,\n  children?: typeof PickerItem | Array<typeof PickerItem>,\n  enabled?: boolean,\n  onValueChange?: (number | string, number) => void,\n  selectedValue?: number | string,\n  /**\n   * dropdownIconColor\n   * Not used for Web.\n   */\n  dropdownIconColor?: string,\n  /* compat */\n  itemStyle?: GenericStyleProp<TextStyle>,\n  mode?: string,\n  prompt?: string,\n};\n\nconst myCreateElement = createElement || unstable_createElement;\n\nconst Select = forwardRef((props: any, forwardedRef) =>\n  myCreateElement('select', props),\n);\n\nconst Picker: React$AbstractComponent<PickerProps, empty> = forwardRef<\n  PickerProps,\n  *,\n>((props, forwardedRef) => {\n  const {\n    enabled,\n    onValueChange,\n    selectedValue,\n    itemStyle,\n    mode,\n    prompt,\n    dropdownIconColor,\n    ...other\n  } = props;\n\n  const hostRef = useRef(null);\n\n  const handleChange = React.useCallback<any>(\n    (e: Object) => {\n      const {selectedIndex, value} = e.target;\n      if (onValueChange) {\n        onValueChange(value, selectedIndex);\n      }\n    },\n    [onValueChange],\n  );\n\n  return (\n    // $FlowFixMe\n    <Select\n      disabled={enabled === false ? true : undefined}\n      onChange={handleChange}\n      ref={hostRef}\n      value={selectedValue}\n      {...other}\n    />\n  );\n});\n\n// $FlowFixMe\nPicker.Item = PickerItem;\n\nexport default Picker;\n"]},"metadata":{},"sourceType":"module"}