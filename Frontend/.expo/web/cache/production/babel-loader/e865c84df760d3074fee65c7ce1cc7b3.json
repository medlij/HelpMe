{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{Platform}from'@unimodules/core';import ExpoLocation from\"./ExpoLocation\";import{LocationAccuracy}from\"./Location.types\";import{LocationSubscriber}from\"./LocationSubscribers\";export function installWebGeolocationPolyfill(){if(Platform.OS!=='web'){window.navigator.geolocation={getCurrentPosition:getCurrentPosition,watchPosition:watchPosition,clearWatch:clearWatch,stopObserving:function stopObserving(){}};}}function convertGeolocationOptions(options){return{accuracy:options.enableHighAccuracy?LocationAccuracy.High:LocationAccuracy.Balanced};}function getCurrentPosition(success){var error=arguments.length>1&&arguments[1]!==undefined?arguments[1]:function(){};var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};_getCurrentPositionAsyncWrapper(success,error,options);}function _getCurrentPositionAsyncWrapper(success,error,options){var result;return _regeneratorRuntime.async(function _getCurrentPositionAsyncWrapper$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return _regeneratorRuntime.awrap(ExpoLocation.requestPermissionsAsync());case 3:_context.next=5;return _regeneratorRuntime.awrap(ExpoLocation.getCurrentPositionAsync(convertGeolocationOptions(options)));case 5:result=_context.sent;success(result);_context.next=12;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](0);error(_context.t0);case 12:case\"end\":return _context.stop();}}},null,null,[[0,9]],Promise);}function watchPosition(success,error,options){var watchId=LocationSubscriber.registerCallback(success);ExpoLocation.watchPositionImplAsync(watchId,options).catch(function(err){LocationSubscriber.unregisterCallback(watchId);error({watchId:watchId,message:err.message,code:err.code});});return watchId;}function clearWatch(watchId){LocationSubscriber.unregisterCallback(watchId);}","map":{"version":3,"sources":["../src/GeolocationPolyfill.ts"],"names":[],"mappings":"4DAAA,OAAS,QAAT,KAAyB,kBAAzB,CAEA,MAAO,CAAA,YAAP,sBACA,OAAyB,gBAAzB,wBACA,OAAS,kBAAT,6BASA,MAAM,SAAU,CAAA,6BAAV,EAAuC,CAC3C,GAAI,QAAQ,CAAC,EAAT,GAAgB,KAApB,CAA2B,CAIzB,MAAM,CAAC,SAAP,CAAiB,WAAjB,CAA+B,CAC7B,kBAAkB,CAAlB,kBAD6B,CAE7B,aAAa,CAAb,aAF6B,CAG7B,UAAU,CAAV,UAH6B,CAO7B,aAAa,CAAE,wBAAK,CAAG,CAPM,CAA/B,CASD,CACF,CAED,QAAS,CAAA,yBAAT,CAAmC,OAAnC,CAA8D,CAC5D,MAAO,CACL,QAAQ,CAAE,OAAO,CAAC,kBAAR,CAA6B,gBAAgB,CAAC,IAA9C,CAAqD,gBAAgB,CAAC,QAD3E,CAAP,CAGD,CAED,QAAS,CAAA,kBAAT,CACE,OADF,CAGkC,IADhC,CAAA,KACgC,2DADE,UAAK,CAAG,CACV,IAAhC,CAAA,OAAgC,2DAAF,EAAE,CAEhC,+BAA+B,CAAC,OAAD,CAAU,KAAV,CAAiB,OAAjB,CAA/B,CACD,CAID,QAAe,CAAA,+BAAf,CACE,OADF,CAEE,KAFF,CAGE,OAHF,uNAMU,YAAY,CAAC,uBAAb,EANV,0DAOyB,YAAY,CAAC,uBAAb,CAAqC,yBAAyB,CAAC,OAAD,CAA9D,CAPzB,SAOU,MAPV,eAQI,OAAO,CAAC,MAAD,CAAP,CARJ,+EAUI,KAAK,aAAL,CAVJ,yEAeA,QAAS,CAAA,aAAT,CACE,OADF,CAEE,KAFF,CAGE,OAHF,CAG6B,CAE3B,GAAM,CAAA,OAAO,CAAG,kBAAkB,CAAC,gBAAnB,CAAoC,OAApC,CAAhB,CAEA,YAAY,CAAC,sBAAb,CAAoC,OAApC,CAA6C,OAA7C,EAAsD,KAAtD,CAA4D,SAAA,GAAG,CAAG,CAChE,kBAAkB,CAAC,kBAAnB,CAAsC,OAAtC,EACA,KAAK,CAAC,CAAE,OAAO,CAAP,OAAF,CAAW,OAAO,CAAE,GAAG,CAAC,OAAxB,CAAiC,IAAI,CAAE,GAAG,CAAC,IAA3C,CAAD,CAAL,CACD,CAHD,EAKA,MAAO,CAAA,OAAP,CACD,CAGD,QAAS,CAAA,UAAT,CAAoB,OAApB,CAAmC,CACjC,kBAAkB,CAAC,kBAAnB,CAAsC,OAAtC,EACD","sourcesContent":["import { Platform } from '@unimodules/core';\n\nimport ExpoLocation from './ExpoLocation';\nimport { LocationObject, LocationAccuracy, LocationOptions } from './Location.types';\nimport { LocationSubscriber } from './LocationSubscribers';\n\ntype GeolocationSuccessCallback = (data: LocationObject) => void;\ntype GeolocationErrorCallback = (error: any) => void;\n\ntype GeolocationOptions = {\n  enableHighAccuracy?: boolean;\n};\n\nexport function installWebGeolocationPolyfill(): void {\n  if (Platform.OS !== 'web') {\n    // Polyfill navigator.geolocation for interop with the core react-native and web API approach to\n    // geolocation\n    // @ts-ignore\n    window.navigator.geolocation = {\n      getCurrentPosition,\n      watchPosition,\n      clearWatch,\n\n      // We don't polyfill stopObserving, this is an internal method that probably should not even exist\n      // in react-native docs\n      stopObserving: () => {},\n    };\n  }\n}\n\nfunction convertGeolocationOptions(options: GeolocationOptions): LocationOptions {\n  return {\n    accuracy: options.enableHighAccuracy ? LocationAccuracy.High : LocationAccuracy.Balanced,\n  };\n}\n\nfunction getCurrentPosition(\n  success: GeolocationSuccessCallback,\n  error: GeolocationErrorCallback = () => {},\n  options: GeolocationOptions = {}\n): void {\n  _getCurrentPositionAsyncWrapper(success, error, options);\n}\n\n// This function exists to let us continue to return undefined from getCurrentPosition, while still\n// using async/await for the internal implementation of it\nasync function _getCurrentPositionAsyncWrapper(\n  success: GeolocationSuccessCallback,\n  error: GeolocationErrorCallback,\n  options: GeolocationOptions\n): Promise<any> {\n  try {\n    await ExpoLocation.requestPermissionsAsync();\n    const result = await ExpoLocation.getCurrentPositionAsync(convertGeolocationOptions(options));\n    success(result);\n  } catch (e) {\n    error(e);\n  }\n}\n\n// Polyfill: navigator.geolocation.watchPosition\nfunction watchPosition(\n  success: GeolocationSuccessCallback,\n  error: GeolocationErrorCallback,\n  options: GeolocationOptions\n) {\n  const watchId = LocationSubscriber.registerCallback(success);\n\n  ExpoLocation.watchPositionImplAsync(watchId, options).catch(err => {\n    LocationSubscriber.unregisterCallback(watchId);\n    error({ watchId, message: err.message, code: err.code });\n  });\n\n  return watchId;\n}\n\n// Polyfill: navigator.geolocation.clearWatch\nfunction clearWatch(watchId: number) {\n  LocationSubscriber.unregisterCallback(watchId);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}