{"ast":null,"code":"function _createForOfIteratorHelperLoose(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(it)return(it=it.call(o)).next.bind(it);if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;return function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{Platform}from'@unimodules/core';import{PermissionStatus}from'unimodules-permissions-interface';import ExpoLocation from\"./ExpoLocation\";import{LocationAccuracy,LocationActivityType,LocationGeofencingEventType,LocationGeofencingRegionState}from\"./Location.types\";import{LocationEventEmitter}from\"./LocationEventEmitter\";import{setGoogleApiKey,googleGeocodeAsync,googleReverseGeocodeAsync}from\"./LocationGoogleGeocoding\";import{LocationSubscriber,HeadingSubscriber,_getCurrentWatchId}from\"./LocationSubscribers\";export function getProviderStatusAsync(){return _regeneratorRuntime.async(function getProviderStatusAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",ExpoLocation.getProviderStatusAsync());case 1:case\"end\":return _context.stop();}}},null,null,null,Promise);}export function enableNetworkProviderAsync(){return _regeneratorRuntime.async(function enableNetworkProviderAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(Platform.OS==='android')){_context2.next=2;break;}return _context2.abrupt(\"return\",ExpoLocation.enableNetworkProviderAsync());case 2:case\"end\":return _context2.stop();}}},null,null,null,Promise);}export function getCurrentPositionAsync(){var options,_args3=arguments;return _regeneratorRuntime.async(function getCurrentPositionAsync$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:options=_args3.length>0&&_args3[0]!==undefined?_args3[0]:{};return _context3.abrupt(\"return\",ExpoLocation.getCurrentPositionAsync(options));case 2:case\"end\":return _context3.stop();}}},null,null,null,Promise);}export function getLastKnownPositionAsync(){var options,_args4=arguments;return _regeneratorRuntime.async(function getLastKnownPositionAsync$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:options=_args4.length>0&&_args4[0]!==undefined?_args4[0]:{};return _context4.abrupt(\"return\",ExpoLocation.getLastKnownPositionAsync(options));case 2:case\"end\":return _context4.stop();}}},null,null,null,Promise);}export function watchPositionAsync(options,callback){var watchId;return _regeneratorRuntime.async(function watchPositionAsync$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:watchId=LocationSubscriber.registerCallback(callback);_context5.next=3;return _regeneratorRuntime.awrap(ExpoLocation.watchPositionImplAsync(watchId,options));case 3:return _context5.abrupt(\"return\",{remove:function remove(){LocationSubscriber.unregisterCallback(watchId);}});case 4:case\"end\":return _context5.stop();}}},null,null,null,Promise);}export function getHeadingAsync(){return _regeneratorRuntime.async(function getHeadingAsync$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:return _context7.abrupt(\"return\",new Promise(function _callee(resolve){var tries,subscription;return _regeneratorRuntime.async(function _callee$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:tries=0;_context6.next=3;return _regeneratorRuntime.awrap(watchHeadingAsync(function(heading){if(heading.accuracy>1||tries>5){subscription.remove();resolve(heading);}else{tries+=1;}}));case 3:subscription=_context6.sent;case 4:case\"end\":return _context6.stop();}}},null,null,null,Promise);}));case 1:case\"end\":return _context7.stop();}}},null,null,null,Promise);}export function watchHeadingAsync(callback){var watchId;return _regeneratorRuntime.async(function watchHeadingAsync$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:watchId=HeadingSubscriber.registerCallback(callback);_context8.next=3;return _regeneratorRuntime.awrap(ExpoLocation.watchDeviceHeading(watchId));case 3:return _context8.abrupt(\"return\",{remove:function remove(){HeadingSubscriber.unregisterCallback(watchId);}});case 4:case\"end\":return _context8.stop();}}},null,null,null,Promise);}export function geocodeAsync(address,options){return _regeneratorRuntime.async(function geocodeAsync$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:if(!(typeof address!=='string')){_context9.next=2;break;}throw new TypeError(\"Address to geocode must be a string. Got \"+address+\" instead.\");case 2:if(!(options!=null&&options.useGoogleMaps||Platform.OS==='web')){_context9.next=6;break;}_context9.next=5;return _regeneratorRuntime.awrap(googleGeocodeAsync(address));case 5:return _context9.abrupt(\"return\",_context9.sent);case 6:_context9.next=8;return _regeneratorRuntime.awrap(ExpoLocation.geocodeAsync(address));case 8:return _context9.abrupt(\"return\",_context9.sent);case 9:case\"end\":return _context9.stop();}}},null,null,null,Promise);}export function reverseGeocodeAsync(location,options){return _regeneratorRuntime.async(function reverseGeocodeAsync$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:if(!(typeof location.latitude!=='number'||typeof location.longitude!=='number')){_context10.next=2;break;}throw new TypeError('Location to reverse-geocode must be an object with number properties `latitude` and `longitude`.');case 2:if(!(options!=null&&options.useGoogleMaps||Platform.OS==='web')){_context10.next=6;break;}_context10.next=5;return _regeneratorRuntime.awrap(googleReverseGeocodeAsync(location));case 5:return _context10.abrupt(\"return\",_context10.sent);case 6:_context10.next=8;return _regeneratorRuntime.awrap(ExpoLocation.reverseGeocodeAsync(location));case 8:return _context10.abrupt(\"return\",_context10.sent);case 9:case\"end\":return _context10.stop();}}},null,null,null,Promise);}export function getPermissionsAsync(){return _regeneratorRuntime.async(function getPermissionsAsync$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:console.warn(\"\\\"getPermissionsAsync\\\" is now deprecated. Please, use \\\"getForegroundPermissions\\\" or \\\"getBackgroundPermissions\\\" instead.\");_context11.next=3;return _regeneratorRuntime.awrap(ExpoLocation.getPermissionsAsync());case 3:return _context11.abrupt(\"return\",_context11.sent);case 4:case\"end\":return _context11.stop();}}},null,null,null,Promise);}export function requestPermissionsAsync(){return _regeneratorRuntime.async(function requestPermissionsAsync$(_context12){while(1){switch(_context12.prev=_context12.next){case 0:console.warn(\"\\\"requestPermissionsAsync\\\" is now deprecated. Please, use \\\"requestForegroundPermissionsAsync\\\" or \\\"requestBackgroundPermissionsAsync\\\" instead.\");_context12.next=3;return _regeneratorRuntime.awrap(ExpoLocation.requestPermissionsAsync());case 3:return _context12.abrupt(\"return\",_context12.sent);case 4:case\"end\":return _context12.stop();}}},null,null,null,Promise);}export function getForegroundPermissionsAsync(){return _regeneratorRuntime.async(function getForegroundPermissionsAsync$(_context13){while(1){switch(_context13.prev=_context13.next){case 0:_context13.next=2;return _regeneratorRuntime.awrap(ExpoLocation.getForegroundPermissionsAsync());case 2:return _context13.abrupt(\"return\",_context13.sent);case 3:case\"end\":return _context13.stop();}}},null,null,null,Promise);}export function requestForegroundPermissionsAsync(){return _regeneratorRuntime.async(function requestForegroundPermissionsAsync$(_context14){while(1){switch(_context14.prev=_context14.next){case 0:_context14.next=2;return _regeneratorRuntime.awrap(ExpoLocation.requestForegroundPermissionsAsync());case 2:return _context14.abrupt(\"return\",_context14.sent);case 3:case\"end\":return _context14.stop();}}},null,null,null,Promise);}export function getBackgroundPermissionsAsync(){return _regeneratorRuntime.async(function getBackgroundPermissionsAsync$(_context15){while(1){switch(_context15.prev=_context15.next){case 0:_context15.next=2;return _regeneratorRuntime.awrap(ExpoLocation.getBackgroundPermissionsAsync());case 2:return _context15.abrupt(\"return\",_context15.sent);case 3:case\"end\":return _context15.stop();}}},null,null,null,Promise);}export function requestBackgroundPermissionsAsync(){return _regeneratorRuntime.async(function requestBackgroundPermissionsAsync$(_context16){while(1){switch(_context16.prev=_context16.next){case 0:_context16.next=2;return _regeneratorRuntime.awrap(ExpoLocation.requestBackgroundPermissionsAsync());case 2:return _context16.abrupt(\"return\",_context16.sent);case 3:case\"end\":return _context16.stop();}}},null,null,null,Promise);}export function hasServicesEnabledAsync(){return _regeneratorRuntime.async(function hasServicesEnabledAsync$(_context17){while(1){switch(_context17.prev=_context17.next){case 0:_context17.next=2;return _regeneratorRuntime.awrap(ExpoLocation.hasServicesEnabledAsync());case 2:return _context17.abrupt(\"return\",_context17.sent);case 3:case\"end\":return _context17.stop();}}},null,null,null,Promise);}function _validateTaskName(taskName){if(!taskName||typeof taskName!=='string'){throw new Error(\"`taskName` must be a non-empty string. Got \"+taskName+\" instead.\");}}export function isBackgroundLocationAvailableAsync(){var providerStatus;return _regeneratorRuntime.async(function isBackgroundLocationAvailableAsync$(_context18){while(1){switch(_context18.prev=_context18.next){case 0:_context18.next=2;return _regeneratorRuntime.awrap(getProviderStatusAsync());case 2:providerStatus=_context18.sent;return _context18.abrupt(\"return\",providerStatus.backgroundModeEnabled);case 4:case\"end\":return _context18.stop();}}},null,null,null,Promise);}export function startLocationUpdatesAsync(taskName){var options,_args19=arguments;return _regeneratorRuntime.async(function startLocationUpdatesAsync$(_context19){while(1){switch(_context19.prev=_context19.next){case 0:options=_args19.length>1&&_args19[1]!==undefined?_args19[1]:{accuracy:LocationAccuracy.Balanced};_validateTaskName(taskName);_context19.next=4;return _regeneratorRuntime.awrap(ExpoLocation.startLocationUpdatesAsync(taskName,options));case 4:case\"end\":return _context19.stop();}}},null,null,null,Promise);}export function stopLocationUpdatesAsync(taskName){return _regeneratorRuntime.async(function stopLocationUpdatesAsync$(_context20){while(1){switch(_context20.prev=_context20.next){case 0:_validateTaskName(taskName);_context20.next=3;return _regeneratorRuntime.awrap(ExpoLocation.stopLocationUpdatesAsync(taskName));case 3:case\"end\":return _context20.stop();}}},null,null,null,Promise);}export function hasStartedLocationUpdatesAsync(taskName){return _regeneratorRuntime.async(function hasStartedLocationUpdatesAsync$(_context21){while(1){switch(_context21.prev=_context21.next){case 0:_validateTaskName(taskName);return _context21.abrupt(\"return\",ExpoLocation.hasStartedLocationUpdatesAsync(taskName));case 2:case\"end\":return _context21.stop();}}},null,null,null,Promise);}function _validateRegions(regions){if(!regions||regions.length===0){throw new Error('Regions array cannot be empty. Use `stopGeofencingAsync` if you want to stop geofencing all regions');}for(var _iterator=_createForOfIteratorHelperLoose(regions),_step;!(_step=_iterator()).done;){var region=_step.value;if(typeof region.latitude!=='number'){throw new TypeError(\"Region's latitude must be a number. Got '\"+region.latitude+\"' instead.\");}if(typeof region.longitude!=='number'){throw new TypeError(\"Region's longitude must be a number. Got '\"+region.longitude+\"' instead.\");}if(typeof region.radius!=='number'){throw new TypeError(\"Region's radius must be a number. Got '\"+region.radius+\"' instead.\");}}}export function startGeofencingAsync(taskName){var regions,_args22=arguments;return _regeneratorRuntime.async(function startGeofencingAsync$(_context22){while(1){switch(_context22.prev=_context22.next){case 0:regions=_args22.length>1&&_args22[1]!==undefined?_args22[1]:[];_validateTaskName(taskName);_validateRegions(regions);_context22.next=5;return _regeneratorRuntime.awrap(ExpoLocation.startGeofencingAsync(taskName,{regions:regions}));case 5:case\"end\":return _context22.stop();}}},null,null,null,Promise);}export function stopGeofencingAsync(taskName){return _regeneratorRuntime.async(function stopGeofencingAsync$(_context23){while(1){switch(_context23.prev=_context23.next){case 0:_validateTaskName(taskName);_context23.next=3;return _regeneratorRuntime.awrap(ExpoLocation.stopGeofencingAsync(taskName));case 3:case\"end\":return _context23.stop();}}},null,null,null,Promise);}export function hasStartedGeofencingAsync(taskName){return _regeneratorRuntime.async(function hasStartedGeofencingAsync$(_context24){while(1){switch(_context24.prev=_context24.next){case 0:_validateTaskName(taskName);return _context24.abrupt(\"return\",ExpoLocation.hasStartedGeofencingAsync(taskName));case 2:case\"end\":return _context24.stop();}}},null,null,null,Promise);}export function setApiKey(apiKey){console.warn(\"Location's method `setApiKey` is deprecated in favor of `setGoogleApiKey`.\");setGoogleApiKey(apiKey);}export{LocationEventEmitter as EventEmitter,_getCurrentWatchId};export{LocationAccuracy as Accuracy,LocationActivityType as ActivityType,LocationGeofencingEventType as GeofencingEventType,LocationGeofencingRegionState as GeofencingRegionState,PermissionStatus,setGoogleApiKey};export{installWebGeolocationPolyfill}from\"./GeolocationPolyfill\";export*from\"./Location.types\";","map":{"version":3,"sources":["../src/Location.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from '@unimodules/core';\nimport { PermissionStatus, PermissionResponse } from 'unimodules-permissions-interface';\n\nimport ExpoLocation from './ExpoLocation';\nimport {\n  LocationAccuracy,\n  LocationCallback,\n  LocationGeocodedAddress,\n  LocationGeocodedLocation,\n  LocationHeadingCallback,\n  LocationHeadingObject,\n  LocationLastKnownOptions,\n  LocationObject,\n  LocationOptions,\n  LocationPermissionResponse,\n  LocationProviderStatus,\n  LocationRegion,\n  LocationSubscription,\n  LocationTaskOptions,\n  LocationActivityType,\n  LocationGeofencingEventType,\n  LocationGeofencingRegionState,\n  LocationGeocodingOptions,\n} from './Location.types';\nimport { LocationEventEmitter } from './LocationEventEmitter';\nimport {\n  setGoogleApiKey,\n  googleGeocodeAsync,\n  googleReverseGeocodeAsync,\n} from './LocationGoogleGeocoding';\nimport { LocationSubscriber, HeadingSubscriber, _getCurrentWatchId } from './LocationSubscribers';\n\nexport async function getProviderStatusAsync(): Promise<LocationProviderStatus> {\n  return ExpoLocation.getProviderStatusAsync();\n}\n\nexport async function enableNetworkProviderAsync(): Promise<void> {\n  // If network provider is disabled (user's location mode is set to \"Device only\"),\n  // Android's location provider may not give you any results. Use this method in order to ask the user\n  // to change the location mode to \"High accuracy\" which uses Google Play services and enables network provider.\n  // `getCurrentPositionAsync` and `watchPositionAsync` are doing it automatically anyway.\n\n  if (Platform.OS === 'android') {\n    return ExpoLocation.enableNetworkProviderAsync();\n  }\n}\n\n/**\n * Requests for one-time delivery of the user's current location.\n * Depending on given `accuracy` option it may take some time to resolve,\n * especially when you're inside a building.\n */\nexport async function getCurrentPositionAsync(\n  options: LocationOptions = {}\n): Promise<LocationObject> {\n  return ExpoLocation.getCurrentPositionAsync(options);\n}\n\n/**\n * Gets the last known position of the device or `null` if it's not available\n * or doesn't match given requirements such as maximum age or required accuracy.\n * It's considered to be faster than `getCurrentPositionAsync` as it doesn't request for the current location.\n */\nexport async function getLastKnownPositionAsync(\n  options: LocationLastKnownOptions = {}\n): Promise<LocationObject | null> {\n  return ExpoLocation.getLastKnownPositionAsync(options);\n}\n\n/**\n * Starts watching for location changes.\n * Given callback will be called once the new location is available.\n */\nexport async function watchPositionAsync(options: LocationOptions, callback: LocationCallback) {\n  const watchId = LocationSubscriber.registerCallback(callback);\n  await ExpoLocation.watchPositionImplAsync(watchId, options);\n\n  return {\n    remove() {\n      LocationSubscriber.unregisterCallback(watchId);\n    },\n  };\n}\n\n/**\n * Resolves to an object with current heading details.\n * To simplify, it calls `watchHeadingAsync` and waits for a couple of updates\n * and returns the one that is accurate enough.\n */\nexport async function getHeadingAsync(): Promise<LocationHeadingObject> {\n  return new Promise<LocationHeadingObject>(async resolve => {\n    let tries = 0;\n\n    const subscription = await watchHeadingAsync(heading => {\n      if (heading.accuracy > 1 || tries > 5) {\n        subscription.remove();\n        resolve(heading);\n      } else {\n        tries += 1;\n      }\n    });\n  });\n}\n\n/**\n * Starts watching for heading changes.\n * Given callback will be called once the new heading is available.\n */\nexport async function watchHeadingAsync(\n  callback: LocationHeadingCallback\n): Promise<LocationSubscription> {\n  const watchId = HeadingSubscriber.registerCallback(callback);\n  await ExpoLocation.watchDeviceHeading(watchId);\n\n  return {\n    remove() {\n      HeadingSubscriber.unregisterCallback(watchId);\n    },\n  };\n}\n\n/**\n * Geocodes given address to an array of latitude-longitude coordinates.\n */\nexport async function geocodeAsync(\n  address: string,\n  options?: LocationGeocodingOptions\n): Promise<LocationGeocodedLocation[]> {\n  if (typeof address !== 'string') {\n    throw new TypeError(`Address to geocode must be a string. Got ${address} instead.`);\n  }\n  if (options?.useGoogleMaps || Platform.OS === 'web') {\n    return await googleGeocodeAsync(address);\n  }\n  return await ExpoLocation.geocodeAsync(address);\n}\n\n/**\n * The opposite behavior of `geocodeAsync` — translates location coordinates to an array of addresses.\n */\nexport async function reverseGeocodeAsync(\n  location: Pick<LocationGeocodedLocation, 'latitude' | 'longitude'>,\n  options?: LocationGeocodingOptions\n): Promise<LocationGeocodedAddress[]> {\n  if (typeof location.latitude !== 'number' || typeof location.longitude !== 'number') {\n    throw new TypeError(\n      'Location to reverse-geocode must be an object with number properties `latitude` and `longitude`.'\n    );\n  }\n  if (options?.useGoogleMaps || Platform.OS === 'web') {\n    return await googleReverseGeocodeAsync(location);\n  }\n  return await ExpoLocation.reverseGeocodeAsync(location);\n}\n\n/**\n * Gets the current state of location permissions.\n * @deprecated Use `getForegroundPermissions` or `getBackgroundPermissions` instead.\n */\nexport async function getPermissionsAsync(): Promise<LocationPermissionResponse> {\n  console.warn(\n    `\"getPermissionsAsync\" is now deprecated. Please, use \"getForegroundPermissions\" or \"getBackgroundPermissions\" instead.`\n  );\n  return await ExpoLocation.getPermissionsAsync();\n}\n\n/**\n * Requests the user to grant location permissions.\n * @deprecated Use `requestForegroundPermissionsAsync` or `requestBackgroundPermissionsAsync` instead.\n */\nexport async function requestPermissionsAsync(): Promise<LocationPermissionResponse> {\n  console.warn(\n    `\"requestPermissionsAsync\" is now deprecated. Please, use \"requestForegroundPermissionsAsync\" or \"requestBackgroundPermissionsAsync\" instead.`\n  );\n\n  return await ExpoLocation.requestPermissionsAsync();\n}\n\n/**\n * Gets the current state of foreground location permissions.\n */\nexport async function getForegroundPermissionsAsync(): Promise<LocationPermissionResponse> {\n  return await ExpoLocation.getForegroundPermissionsAsync();\n}\n\n/**\n * Requests the user to grant foreground location permissions.\n */\nexport async function requestForegroundPermissionsAsync(): Promise<LocationPermissionResponse> {\n  return await ExpoLocation.requestForegroundPermissionsAsync();\n}\n\n/**\n * Gets the current state of background location permissions.\n */\nexport async function getBackgroundPermissionsAsync(): Promise<PermissionResponse> {\n  return await ExpoLocation.getBackgroundPermissionsAsync();\n}\n\n/**\n * Requests the user to grant background location permissions.\n */\nexport async function requestBackgroundPermissionsAsync(): Promise<PermissionResponse> {\n  return await ExpoLocation.requestBackgroundPermissionsAsync();\n}\n\n// --- Location service\n\n/**\n * Returns `true` if the device has location services enabled or `false` otherwise.\n */\nexport async function hasServicesEnabledAsync(): Promise<boolean> {\n  return await ExpoLocation.hasServicesEnabledAsync();\n}\n\n// --- Background location updates\n\nfunction _validateTaskName(taskName: string) {\n  if (!taskName || typeof taskName !== 'string') {\n    throw new Error(`\\`taskName\\` must be a non-empty string. Got ${taskName} instead.`);\n  }\n}\n\nexport async function isBackgroundLocationAvailableAsync(): Promise<boolean> {\n  const providerStatus = await getProviderStatusAsync();\n  return providerStatus.backgroundModeEnabled;\n}\n\nexport async function startLocationUpdatesAsync(\n  taskName: string,\n  options: LocationTaskOptions = { accuracy: LocationAccuracy.Balanced }\n): Promise<void> {\n  _validateTaskName(taskName);\n  await ExpoLocation.startLocationUpdatesAsync(taskName, options);\n}\n\nexport async function stopLocationUpdatesAsync(taskName: string): Promise<void> {\n  _validateTaskName(taskName);\n  await ExpoLocation.stopLocationUpdatesAsync(taskName);\n}\n\nexport async function hasStartedLocationUpdatesAsync(taskName: string): Promise<boolean> {\n  _validateTaskName(taskName);\n  return ExpoLocation.hasStartedLocationUpdatesAsync(taskName);\n}\n\n// --- Geofencing\n\nfunction _validateRegions(regions: LocationRegion[]) {\n  if (!regions || regions.length === 0) {\n    throw new Error(\n      'Regions array cannot be empty. Use `stopGeofencingAsync` if you want to stop geofencing all regions'\n    );\n  }\n  for (const region of regions) {\n    if (typeof region.latitude !== 'number') {\n      throw new TypeError(`Region's latitude must be a number. Got '${region.latitude}' instead.`);\n    }\n    if (typeof region.longitude !== 'number') {\n      throw new TypeError(\n        `Region's longitude must be a number. Got '${region.longitude}' instead.`\n      );\n    }\n    if (typeof region.radius !== 'number') {\n      throw new TypeError(`Region's radius must be a number. Got '${region.radius}' instead.`);\n    }\n  }\n}\n\nexport async function startGeofencingAsync(\n  taskName: string,\n  regions: LocationRegion[] = []\n): Promise<void> {\n  _validateTaskName(taskName);\n  _validateRegions(regions);\n  await ExpoLocation.startGeofencingAsync(taskName, { regions });\n}\n\nexport async function stopGeofencingAsync(taskName: string): Promise<void> {\n  _validateTaskName(taskName);\n  await ExpoLocation.stopGeofencingAsync(taskName);\n}\n\nexport async function hasStartedGeofencingAsync(taskName: string): Promise<boolean> {\n  _validateTaskName(taskName);\n  return ExpoLocation.hasStartedGeofencingAsync(taskName);\n}\n\n/**\n * @deprecated\n * Deprecated as of SDK39 in favour of `setGoogleApiKey`.\n */\nexport function setApiKey(apiKey: string): void {\n  console.warn(\"Location's method `setApiKey` is deprecated in favor of `setGoogleApiKey`.\");\n  setGoogleApiKey(apiKey);\n}\n\n// For internal purposes\nexport { LocationEventEmitter as EventEmitter, _getCurrentWatchId };\n\n// Export as namespaced types.\nexport {\n  LocationAccuracy as Accuracy,\n  LocationActivityType as ActivityType,\n  LocationGeofencingEventType as GeofencingEventType,\n  LocationGeofencingRegionState as GeofencingRegionState,\n  PermissionStatus,\n  setGoogleApiKey,\n};\n\nexport { installWebGeolocationPolyfill } from './GeolocationPolyfill';\nexport * from './Location.types';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}