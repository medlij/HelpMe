{"ast":null,"code":"function murmurhash2_32_gc(str,seed){var l=str.length,h=seed^l,i=0,k;while(l>=4){k=str.charCodeAt(i)&0xff|(str.charCodeAt(++i)&0xff)<<8|(str.charCodeAt(++i)&0xff)<<16|(str.charCodeAt(++i)&0xff)<<24;k=(k&0xffff)*0x5bd1e995+(((k>>>16)*0x5bd1e995&0xffff)<<16);k^=k>>>24;k=(k&0xffff)*0x5bd1e995+(((k>>>16)*0x5bd1e995&0xffff)<<16);h=(h&0xffff)*0x5bd1e995+(((h>>>16)*0x5bd1e995&0xffff)<<16)^k;l-=4;++i;}switch(l){case 3:h^=(str.charCodeAt(i+2)&0xff)<<16;case 2:h^=(str.charCodeAt(i+1)&0xff)<<8;case 1:h^=str.charCodeAt(i)&0xff;h=(h&0xffff)*0x5bd1e995+(((h>>>16)*0x5bd1e995&0xffff)<<16);}h^=h>>>13;h=(h&0xffff)*0x5bd1e995+(((h>>>16)*0x5bd1e995&0xffff)<<16);h^=h>>>15;return h>>>0;}var hash=function hash(str){return murmurhash2_32_gc(str,1).toString(36);};export default hash;","map":{"version":3,"sources":["/home/fatima/HelpMe/Frontend/node_modules/react-native-web/src/vendor/hash/index.js"],"names":["murmurhash2_32_gc","str","seed","l","length","h","i","k","charCodeAt","hash","toString"],"mappings":"AAeA,QAASA,CAAAA,iBAAT,CAA2BC,GAA3B,CAAgCC,IAAhC,CAAsC,CACpC,GAAIC,CAAAA,CAAC,CAAGF,GAAG,CAACG,MAAZ,CACEC,CAAC,CAAGH,IAAI,CAAGC,CADb,CAEEG,CAAC,CAAG,CAFN,CAGEC,CAHF,CAKA,MAAOJ,CAAC,EAAI,CAAZ,CAAe,CACbI,CAAC,CACEN,GAAG,CAACO,UAAJ,CAAeF,CAAf,EAAoB,IAArB,CACC,CAACL,GAAG,CAACO,UAAJ,CAAe,EAAEF,CAAjB,EAAsB,IAAvB,GAAgC,CADjC,CAEC,CAACL,GAAG,CAACO,UAAJ,CAAe,EAAEF,CAAjB,EAAsB,IAAvB,GAAgC,EAFjC,CAGC,CAACL,GAAG,CAACO,UAAJ,CAAe,EAAEF,CAAjB,EAAsB,IAAvB,GAAgC,EAJnC,CAMAC,CAAC,CAAG,CAACA,CAAC,CAAG,MAAL,EAAe,UAAf,EAA6B,CAAE,CAACA,CAAC,GAAK,EAAP,EAAa,UAAd,CAA4B,MAA7B,GAAwC,EAArE,CAAJ,CACAA,CAAC,EAAIA,CAAC,GAAK,EAAX,CACAA,CAAC,CAAG,CAACA,CAAC,CAAG,MAAL,EAAe,UAAf,EAA6B,CAAE,CAACA,CAAC,GAAK,EAAP,EAAa,UAAd,CAA4B,MAA7B,GAAwC,EAArE,CAAJ,CAEAF,CAAC,CAAI,CAACA,CAAC,CAAG,MAAL,EAAe,UAAf,EAA6B,CAAE,CAACA,CAAC,GAAK,EAAP,EAAa,UAAd,CAA4B,MAA7B,GAAwC,EAArE,CAAD,CAA6EE,CAAjF,CAEAJ,CAAC,EAAI,CAAL,CACA,EAAEG,CAAF,CACD,CAED,OAAQH,CAAR,EACE,IAAK,EAAL,CACEE,CAAC,EAAI,CAACJ,GAAG,CAACO,UAAJ,CAAeF,CAAC,CAAG,CAAnB,EAAwB,IAAzB,GAAkC,EAAvC,CACF,IAAK,EAAL,CACED,CAAC,EAAI,CAACJ,GAAG,CAACO,UAAJ,CAAeF,CAAC,CAAG,CAAnB,EAAwB,IAAzB,GAAkC,CAAvC,CACF,IAAK,EAAL,CACED,CAAC,EAAIJ,GAAG,CAACO,UAAJ,CAAeF,CAAf,EAAoB,IAAzB,CACAD,CAAC,CAAG,CAACA,CAAC,CAAG,MAAL,EAAe,UAAf,EAA6B,CAAE,CAACA,CAAC,GAAK,EAAP,EAAa,UAAd,CAA4B,MAA7B,GAAwC,EAArE,CAAJ,CAPJ,CAUAA,CAAC,EAAIA,CAAC,GAAK,EAAX,CACAA,CAAC,CAAG,CAACA,CAAC,CAAG,MAAL,EAAe,UAAf,EAA6B,CAAE,CAACA,CAAC,GAAK,EAAP,EAAa,UAAd,CAA4B,MAA7B,GAAwC,EAArE,CAAJ,CACAA,CAAC,EAAIA,CAAC,GAAK,EAAX,CAEA,MAAOA,CAAAA,CAAC,GAAK,CAAb,CACD,CAED,GAAMI,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,CAAAR,GAAG,QAAID,CAAAA,iBAAiB,CAACC,GAAD,CAAM,CAAN,CAAjB,CAA0BS,QAA1B,CAAmC,EAAnC,CAAJ,EAAhB,CAEA,cAAeD,CAAAA,IAAf","sourcesContent":["/* eslint-disable */\n\n/**\n * JS Implementation of MurmurHash2\n *\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n *\n * @param {string} str ASCII only\n * @param {number} seed Positive integer only\n * @return {number} 32-bit positive integer hash\n */\n\nfunction murmurhash2_32_gc(str, seed) {\n  var l = str.length,\n    h = seed ^ l,\n    i = 0,\n    k;\n\n  while (l >= 4) {\n    k =\n      (str.charCodeAt(i) & 0xff) |\n      ((str.charCodeAt(++i) & 0xff) << 8) |\n      ((str.charCodeAt(++i) & 0xff) << 16) |\n      ((str.charCodeAt(++i) & 0xff) << 24);\n\n    k = (k & 0xffff) * 0x5bd1e995 + ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16);\n    k ^= k >>> 24;\n    k = (k & 0xffff) * 0x5bd1e995 + ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16);\n\n    h = ((h & 0xffff) * 0x5bd1e995 + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16)) ^ k;\n\n    l -= 4;\n    ++i;\n  }\n\n  switch (l) {\n    case 3:\n      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;\n    case 2:\n      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;\n    case 1:\n      h ^= str.charCodeAt(i) & 0xff;\n      h = (h & 0xffff) * 0x5bd1e995 + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16);\n  }\n\n  h ^= h >>> 13;\n  h = (h & 0xffff) * 0x5bd1e995 + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16);\n  h ^= h >>> 15;\n\n  return h >>> 0;\n}\n\nconst hash = str => murmurhash2_32_gc(str, 1).toString(36);\n\nexport default hash;\n"]},"metadata":{},"sourceType":"module"}