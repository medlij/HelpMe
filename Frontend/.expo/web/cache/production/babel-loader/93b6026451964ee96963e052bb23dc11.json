{"ast":null,"code":"import{canUseDOM}from'fbjs/lib/ExecutionEnvironment';import useLayoutEffect from\"./useLayoutEffect\";import UIManager from\"../exports/UIManager\";var DOM_LAYOUT_HANDLER_NAME='__reactLayoutHandler';var didWarn=!canUseDOM;var resizeObserver=null;function getResizeObserver(){if(canUseDOM&&typeof window.ResizeObserver!=='undefined'){if(resizeObserver==null){resizeObserver=new window.ResizeObserver(function(entries){entries.forEach(function(entry){var node=entry.target;var onLayout=node[DOM_LAYOUT_HANDLER_NAME];if(typeof onLayout==='function'){UIManager.measure(node,function(x,y,width,height,left,top){var event={nativeEvent:{layout:{x:x,y:y,width:width,height:height,left:left,top:top}},timeStamp:Date.now()};Object.defineProperty(event.nativeEvent,'target',{enumerable:true,get:function get(){return entry.target;}});onLayout(event);});}});});}}else if(!didWarn){if(process.env.NODE_ENV!=='production'&&process.env.NODE_ENV!=='test'){console.warn('onLayout relies on ResizeObserver which is not supported by your browser. '+'Please include a polyfill, e.g., https://github.com/que-etc/resize-observer-polyfill.');didWarn=true;}}return resizeObserver;}export default function useElementLayout(ref,onLayout){var observer=getResizeObserver();useLayoutEffect(function(){var node=ref.current;if(node!=null){node[DOM_LAYOUT_HANDLER_NAME]=onLayout;}},[ref,onLayout]);useLayoutEffect(function(){var node=ref.current;if(node!=null&&observer!=null){if(typeof node[DOM_LAYOUT_HANDLER_NAME]==='function'){observer.observe(node);}else{observer.unobserve(node);}}return function(){if(node!=null&&observer!=null){observer.unobserve(node);}};},[ref,observer]);}","map":{"version":3,"sources":["/home/fatima/HelpMe/Frontend/node_modules/react-native-web/src/hooks/useElementLayout.js"],"names":["canUseDOM","useLayoutEffect","UIManager","DOM_LAYOUT_HANDLER_NAME","didWarn","resizeObserver","getResizeObserver","window","ResizeObserver","entries","forEach","entry","node","target","onLayout","measure","x","y","width","height","left","top","event","nativeEvent","layout","timeStamp","Date","now","Object","defineProperty","enumerable","get","process","env","NODE_ENV","console","warn","useElementLayout","ref","observer","current","observe","unobserve"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type { ElementRef } from 'react';\nimport type { LayoutEvent } from '../types';\n\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport useLayoutEffect from './useLayoutEffect';\nimport UIManager from '../exports/UIManager';\n\nconst DOM_LAYOUT_HANDLER_NAME = '__reactLayoutHandler';\n\nlet didWarn = !canUseDOM;\nlet resizeObserver = null;\n\nfunction getResizeObserver(): ?ResizeObserver {\n  if (canUseDOM && typeof window.ResizeObserver !== 'undefined') {\n    if (resizeObserver == null) {\n      resizeObserver = new window.ResizeObserver(function(entries) {\n        entries.forEach(entry => {\n          const node = entry.target;\n          const onLayout = node[DOM_LAYOUT_HANDLER_NAME];\n          if (typeof onLayout === 'function') {\n            // We still need to measure the view because browsers don't yet provide\n            // border-box dimensions in the entry\n            UIManager.measure(node, (x, y, width, height, left, top) => {\n              const event: LayoutEvent = {\n                // $FlowFixMe\n                nativeEvent: {\n                  layout: { x, y, width, height, left, top }\n                },\n                timeStamp: Date.now()\n              };\n              Object.defineProperty(event.nativeEvent, 'target', {\n                enumerable: true,\n                get: () => entry.target\n              });\n              onLayout(event);\n            });\n          }\n        });\n      });\n    }\n  } else if (!didWarn) {\n    if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {\n      console.warn(\n        'onLayout relies on ResizeObserver which is not supported by your browser. ' +\n          'Please include a polyfill, e.g., https://github.com/que-etc/resize-observer-polyfill.'\n      );\n      didWarn = true;\n    }\n  }\n  return resizeObserver;\n}\n\nexport default function useElementLayout(\n  ref: ElementRef<any>,\n  onLayout?: ?(e: LayoutEvent) => void\n) {\n  const observer = getResizeObserver();\n\n  useLayoutEffect(() => {\n    const node = ref.current;\n    if (node != null) {\n      node[DOM_LAYOUT_HANDLER_NAME] = onLayout;\n    }\n  }, [ref, onLayout]);\n\n  // Observing is done in a separate effect to avoid this effect running\n  // when 'onLayout' changes.\n  useLayoutEffect(() => {\n    const node = ref.current;\n    if (node != null && observer != null) {\n      if (typeof node[DOM_LAYOUT_HANDLER_NAME] === 'function') {\n        observer.observe(node);\n      } else {\n        observer.unobserve(node);\n      }\n    }\n    return () => {\n      if (node != null && observer != null) {\n        observer.unobserve(node);\n      }\n    };\n  }, [ref, observer]);\n}\n"]},"metadata":{},"sourceType":"module"}