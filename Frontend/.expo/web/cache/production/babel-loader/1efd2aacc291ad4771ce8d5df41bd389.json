{"ast":null,"code":"var CSS_UNIT_RE=/^[+-]?\\d*(?:\\.\\d+)?(?:[Ee][+-]?\\d+)?(%|\\w*)/;var getUnit=function getUnit(str){return str.match(CSS_UNIT_RE)[1];};var isNumeric=function isNumeric(n){return!isNaN(parseFloat(n))&&isFinite(n);};var multiplyStyleLengthValue=function multiplyStyleLengthValue(value,multiple){if(typeof value==='string'){var number=parseFloat(value)*multiple;var unit=getUnit(value);return\"\"+number+unit;}else if(isNumeric(value)){return value*multiple;}};export default multiplyStyleLengthValue;","map":{"version":3,"sources":["/home/fatima/HelpMe/Frontend/node_modules/react-native-web/src/modules/multiplyStyleLengthValue/index.js"],"names":["CSS_UNIT_RE","getUnit","str","match","isNumeric","n","isNaN","parseFloat","isFinite","multiplyStyleLengthValue","value","multiple","number","unit"],"mappings":"AASA,GAAMA,CAAAA,WAAW,CAAG,6CAApB,CAEA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,KAAJ,CAAUH,WAAV,EAAuB,CAAvB,CAAJ,EAAnB,CAEA,GAAMI,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAAAC,CAAC,CAAI,CACrB,MAAO,CAACC,KAAK,CAACC,UAAU,CAACF,CAAD,CAAX,CAAN,EAAyBG,QAAQ,CAACH,CAAD,CAAxC,CACD,CAFD,CAIA,GAAMI,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAACC,KAAD,CAAyBC,QAAzB,CAAsC,CACrE,GAAI,MAAOD,CAAAA,KAAP,GAAiB,QAArB,CAA+B,CAC7B,GAAME,CAAAA,MAAM,CAAGL,UAAU,CAACG,KAAD,CAAV,CAAoBC,QAAnC,CACA,GAAME,CAAAA,IAAI,CAAGZ,OAAO,CAACS,KAAD,CAApB,CACA,SAAUE,MAAV,CAAmBC,IAAnB,CACD,CAJD,IAIO,IAAIT,SAAS,CAACM,KAAD,CAAb,CAAsB,CAC3B,MAAOA,CAAAA,KAAK,CAAGC,QAAf,CACD,CACF,CARD,CAUA,cAAeF,CAAAA,wBAAf","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noflow\n */\n\nconst CSS_UNIT_RE = /^[+-]?\\d*(?:\\.\\d+)?(?:[Ee][+-]?\\d+)?(%|\\w*)/;\n\nconst getUnit = str => str.match(CSS_UNIT_RE)[1];\n\nconst isNumeric = n => {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n\nconst multiplyStyleLengthValue = (value: string | number, multiple) => {\n  if (typeof value === 'string') {\n    const number = parseFloat(value) * multiple;\n    const unit = getUnit(value);\n    return `${number}${unit}`;\n  } else if (isNumeric(value)) {\n    return value * multiple;\n  }\n};\n\nexport default multiplyStyleLengthValue;\n"]},"metadata":{},"sourceType":"module"}