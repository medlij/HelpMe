{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}var _Screens;function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import View from\"react-native-web/dist/exports/View\";import Platform from\"react-native-web/dist/exports/Platform\";var Screens;try{Screens=require('react-native-screens');}catch(e){}var WebScreen=function(_React$Component){_inherits(WebScreen,_React$Component);var _super=_createSuper(WebScreen);function WebScreen(){_classCallCheck(this,WebScreen);return _super.apply(this,arguments);}_createClass(WebScreen,[{key:\"render\",value:function render(){var _this$props=this.props,active=_this$props.active,style=_this$props.style,rest=_objectWithoutProperties(_this$props,[\"active\",\"style\"]);return React.createElement(View,_extends({hidden:!active,style:[style,{display:active?'flex':'none'}]},rest));}}]);return WebScreen;}(React.Component);var AnimatedWebScreen=Animated.createAnimatedComponent(WebScreen);export var shouldUseActivityState=(_Screens=Screens)===null||_Screens===void 0?void 0:_Screens.shouldUseActivityState;export var MaybeScreenContainer=function MaybeScreenContainer(_ref){var enabled=_ref.enabled,rest=_objectWithoutProperties(_ref,[\"enabled\"]);var _Screens2;if(enabled&&Platform.OS!=='web'&&(_Screens2=Screens)!==null&&_Screens2!==void 0&&_Screens2.screensEnabled()){return React.createElement(Screens.ScreenContainer,_extends({enabled:enabled},rest));}return React.createElement(View,rest);};export var MaybeScreen=function MaybeScreen(_ref2){var enabled=_ref2.enabled,active=_ref2.active,rest=_objectWithoutProperties(_ref2,[\"enabled\",\"active\"]);var _Screens3;if(enabled&&Platform.OS==='web'){return React.createElement(AnimatedWebScreen,_extends({active:active},rest));}if(enabled&&(_Screens3=Screens)!==null&&_Screens3!==void 0&&_Screens3.screensEnabled()){if(shouldUseActivityState){return React.createElement(Screens.Screen,_extends({enabled:enabled,activityState:active},rest));}else{return React.createElement(Screens.Screen,_extends({enabled:enabled,active:active},rest));}}return React.createElement(View,rest);};","map":{"version":3,"sources":["Screens.tsx"],"names":["Screens","require","React","render","rest","display","active","AnimatedWebScreen","Animated","shouldUseActivityState","MaybeScreenContainer","enabled","Platform","MaybeScreen"],"mappings":"83CAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,+KAGA,GAAA,CAAA,OAAA,CAEA,GAAI,CACFA,OAAO,CAAGC,OAAO,CAAjBD,sBAAiB,CAAjBA,CADF,CAEE,MAAA,CAAA,CAAU,CAIZ,C,GAGA,CAAA,S,2OAMEG,iBAAS,CACP,gBAAmC,KAAnC,KAAA,CAAM,MAAN,aAAM,MAAN,CAAM,KAAN,aAAM,KAAN,CAA0BC,IAA1B,0DAEA,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAEE,MAAM,CAAE,CAFV,MAAA,CAGE,KAAK,CAAE,CAAA,KAAA,CAAQ,CAAEC,OAAO,CAAEC,MAAM,CAAA,MAAA,CAAY,MAA7B,CAAR,CAHT,CAAA,CADF,IACE,CAAA,CADF,CAQD,C,uBAjBqBJ,KAAK,CAA7B,S,EAoBA,GAAMK,CAAAA,iBAAiB,CAAGC,QAAQ,CAARA,uBAAAA,CAA1B,SAA0BA,CAA1B,CAGA,MAAO,IAAMC,CAAAA,sBAAsB,CAAA,CAAA,QAAA,CAAA,OAAA,IAAA,IAAA,EAAA,QAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAGT,QAAAA,CAA/B,sBAAA,CAEP,MAAO,IAAMU,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,MAM9B,IAN+B,CAAA,OAM/B,MAN+B,OAM/B,CAJDN,IAIC,4CAAA,GAAA,CAAA,SAAA,CACJ,GAAIO,OAAO,EAAIC,QAAQ,CAARA,EAAAA,GAAXD,KAAAA,EAAAA,CAAAA,SAAAA,CAAAA,OAAAA,IAAAA,IAAAA,EAAAA,SAAAA,GAAAA,IAAAA,EAAAA,EAAoCX,SAAAA,CAAxC,cAAwCA,EAAxC,CAAmE,CACjE,MAEE,CAAA,KAAA,CAAA,aAAA,CAAC,OAAD,CAAA,eAAA,CAAA,QAAA,CAAA,CAAyB,OAAO,CAAEW,OAAlC,CAAA,CAAA,IAAA,CAAA,CAFF,CAID,CAED,MAAO,CAAA,KAAA,CAAA,aAAA,CAAA,IAAA,CAAP,IAAO,CAAP,CAdK,CAAA,CAiBP,MAAO,IAAME,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,OAQrB,IARsB,CAAA,OAQtB,OARsB,OAQtB,CARsB,MAQtB,OARsB,MAQtB,CALDT,IAKC,sDAAA,GAAA,CAAA,SAAA,CACJ,GAAIO,OAAO,EAAIC,QAAQ,CAARA,EAAAA,GAAf,KAAA,CAAsC,CACpC,MAAO,CAAA,KAAA,CAAA,aAAA,CAAA,iBAAA,CAAA,QAAA,CAAA,CAAmB,MAAM,CAAEN,MAA3B,CAAA,CAAP,IAAO,CAAA,CAAP,CACD,CAED,GAAIK,OAAO,EAAA,CAAA,SAAA,CAAA,OAAA,IAAA,IAAPA,EAAO,SAAA,GAAA,IAAA,EAAPA,EAAWX,SAAAA,CAAf,cAAeA,EAAf,CAA0C,CACxC,GAAA,sBAAA,CAA4B,CAC1B,MAEE,CAAA,KAAA,CAAA,aAAA,CAAC,OAAD,CAAA,MAAA,CAAA,QAAA,CAAA,CAAgB,OAAO,CAAvB,OAAA,CAAkC,aAAa,CAAEM,MAAjD,CAAA,CAAA,IAAA,CAAA,CAFF,CADF,CAAA,IAKO,CACL,MAEE,CAAA,KAAA,CAAA,aAAA,CAAC,OAAD,CAAA,MAAA,CAAA,QAAA,CAAA,CAAgB,OAAO,CAAvB,OAAA,CAAkC,MAAM,CAAEA,MAA1C,CAAA,CAAA,IAAA,CAAA,CAFF,CAID,CACF,CAED,MAAO,CAAA,KAAA,CAAA,aAAA,CAAA,IAAA,CAAP,IAAO,CAAP,CA3BK,CAAA","sourcesContent":["import * as React from 'react';\nimport { Animated, View, Platform, ViewProps } from 'react-native';\n\nlet Screens: typeof import('react-native-screens') | undefined;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\n\n// The web implementation in react-native-screens seems buggy.\n// The view doesn't become visible after coming back in some cases.\n// So we use our custom implementation.\nclass WebScreen extends React.Component<\n  ViewProps & {\n    active: number;\n    children: React.ReactNode;\n  }\n> {\n  render() {\n    const { active, style, ...rest } = this.props;\n\n    return (\n      <View\n        // @ts-expect-error: hidden exists on web, but not in React Native\n        hidden={!active}\n        style={[style, { display: active ? 'flex' : 'none' }]}\n        {...rest}\n      />\n    );\n  }\n}\n\nconst AnimatedWebScreen = Animated.createAnimatedComponent(WebScreen);\n\n// @ts-ignore\nexport const shouldUseActivityState = Screens?.shouldUseActivityState;\n\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS !== 'web' && Screens?.screensEnabled()) {\n    return (\n      // @ts-ignore\n      <Screens.ScreenContainer enabled={enabled} {...rest} />\n    );\n  }\n\n  return <View {...rest} />;\n};\n\nexport const MaybeScreen = ({\n  enabled,\n  active,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  active: 0 | 1 | 2 | Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS === 'web') {\n    return <AnimatedWebScreen active={active} {...rest} />;\n  }\n\n  if (enabled && Screens?.screensEnabled()) {\n    if (shouldUseActivityState) {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screens.Screen enabled={enabled} activityState={active} {...rest} />\n      );\n    } else {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screens.Screen enabled={enabled} active={active} {...rest} />\n      );\n    }\n  }\n\n  return <View {...rest} />;\n};\n"]},"metadata":{},"sourceType":"module"}