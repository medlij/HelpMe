{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _defineProperty2 from\"@babel/runtime/helpers/defineProperty\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty2(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Dimensions from\"react-native-web/dist/exports/Dimensions\";import Platform from\"react-native-web/dist/exports/Platform\";import{screensEnabled}from'react-native-screens';import{MaybeScreenContainer,MaybeScreen,shouldUseActivityState}from\"../Screens\";import{getDefaultHeaderHeight}from\"../Header/HeaderSegment\";import CardContainer from\"./CardContainer\";import{DefaultTransition,ModalTransition}from\"../../TransitionConfigs/TransitionPresets\";import{forNoAnimation as forNoAnimationHeader}from\"../../TransitionConfigs/HeaderStyleInterpolators\";import{forNoAnimation as forNoAnimationCard}from\"../../TransitionConfigs/CardStyleInterpolators\";import getDistanceForDirection from\"../../utils/getDistanceForDirection\";var EPSILON=0.01;var STATE_INACTIVE=0;var STATE_TRANSITIONING_OR_BELOW_TOP=1;var STATE_ON_TOP=2;var FALLBACK_DESCRIPTOR=Object.freeze({options:{}});var getHeaderHeights=function getHeaderHeights(routes,insets,isParentHeaderShown,descriptors,layout,previous){return routes.reduce(function(acc,curr){var _ref=descriptors[curr.key]||{},_ref$options=_ref.options,options=_ref$options===void 0?{}:_ref$options;var style=StyleSheet.flatten(options.headerStyle||{});var height=typeof style.height==='number'?style.height:previous[curr.key];var safeAreaInsets=_objectSpread(_objectSpread({},insets),options.safeAreaInsets);var _options$headerStatus=options.headerStatusBarHeight,headerStatusBarHeight=_options$headerStatus===void 0?isParentHeaderShown?0:safeAreaInsets.top:_options$headerStatus;acc[curr.key]=typeof height==='number'?height:getDefaultHeaderHeight(layout,headerStatusBarHeight);return acc;},{});};var getDistanceFromOptions=function getDistanceFromOptions(mode,layout,descriptor){var _ref2=(descriptor===null||descriptor===void 0?void 0:descriptor.options)||{},_ref2$gestureDirectio=_ref2.gestureDirection,gestureDirection=_ref2$gestureDirectio===void 0?mode==='modal'?ModalTransition.gestureDirection:DefaultTransition.gestureDirection:_ref2$gestureDirectio;return getDistanceForDirection(layout,gestureDirection);};var getProgressFromGesture=function getProgressFromGesture(mode,gesture,layout,descriptor){var distance=getDistanceFromOptions(mode,{width:Math.max(1,layout.width),height:Math.max(1,layout.height)},descriptor);if(distance>0){return gesture.interpolate({inputRange:[0,distance],outputRange:[1,0]});}return gesture.interpolate({inputRange:[distance,0],outputRange:[0,1]});};var CardStack=function(_React$Component){_inherits(CardStack,_React$Component);var _super=_createSuper(CardStack);function CardStack(_props){var _this;_classCallCheck(this,CardStack);_this=_super.call(this,_props);_defineProperty(_assertThisInitialized(_this),\"handleLayout\",function(e){var _e$nativeEvent$layout=e.nativeEvent.layout,height=_e$nativeEvent$layout.height,width=_e$nativeEvent$layout.width;var layout={width:width,height:height};_this.setState(function(state,props){if(height===state.layout.height&&width===state.layout.width){return null;}return{layout:layout,headerHeights:getHeaderHeights(props.routes,props.insets,props.isParentHeaderShown,state.descriptors,layout,state.headerHeights)};});});_defineProperty(_assertThisInitialized(_this),\"handleHeaderLayout\",function(_ref3){var route=_ref3.route,height=_ref3.height;_this.setState(function(_ref4){var headerHeights=_ref4.headerHeights;var previousHeight=headerHeights[route.key];if(previousHeight===height){return null;}return{headerHeights:_objectSpread(_objectSpread({},headerHeights),{},_defineProperty2({},route.key,height))};});});_defineProperty(_assertThisInitialized(_this),\"getFocusedRoute\",function(){var state=_this.props.state;return state.routes[state.index];});_defineProperty(_assertThisInitialized(_this),\"getPreviousScene\",function(_ref5){var route=_ref5.route;var getPreviousRoute=_this.props.getPreviousRoute;var scenes=_this.state.scenes;var previousRoute=getPreviousRoute({route:route});if(previousRoute){var previousScene=scenes.find(function(scene){return scene.route.key===previousRoute.key;});return previousScene;}return undefined;});var _Dimensions$get=Dimensions.get('window'),_Dimensions$get$heigh=_Dimensions$get.height,_height=_Dimensions$get$heigh===void 0?0:_Dimensions$get$heigh,_Dimensions$get$width=_Dimensions$get.width,_width=_Dimensions$get$width===void 0?0:_Dimensions$get$width;_this.state={routes:[],scenes:[],gestures:{},layout:{height:_height,width:_width},descriptors:_this.props.descriptors,headerHeights:{}};return _this;}_createClass(CardStack,[{key:\"render\",value:function render(){var _this2=this;var _this$props=this.props,mode=_this$props.mode,insets=_this$props.insets,descriptors=_this$props.descriptors,state=_this$props.state,routes=_this$props.routes,closingRouteKeys=_this$props.closingRouteKeys,onOpenRoute=_this$props.onOpenRoute,onCloseRoute=_this$props.onCloseRoute,getGesturesEnabled=_this$props.getGesturesEnabled,renderHeader=_this$props.renderHeader,renderScene=_this$props.renderScene,headerMode=_this$props.headerMode,isParentHeaderShown=_this$props.isParentHeaderShown,onTransitionStart=_this$props.onTransitionStart,onTransitionEnd=_this$props.onTransitionEnd,onPageChangeStart=_this$props.onPageChangeStart,onPageChangeConfirm=_this$props.onPageChangeConfirm,onPageChangeCancel=_this$props.onPageChangeCancel,onGestureStart=_this$props.onGestureStart,onGestureEnd=_this$props.onGestureEnd,onGestureCancel=_this$props.onGestureCancel,_this$props$detachIna=_this$props.detachInactiveScreens,detachInactiveScreens=_this$props$detachIna===void 0?Platform.OS==='web'||shouldUseActivityState:_this$props$detachIna;var _this$state=this.state,scenes=_this$state.scenes,layout=_this$state.layout,gestures=_this$state.gestures,headerHeights=_this$state.headerHeights;var focusedRoute=state.routes[state.index];var focusedDescriptor=descriptors[focusedRoute.key];var focusedOptions=focusedDescriptor?focusedDescriptor.options:{};var focusedHeaderHeight=headerHeights[focusedRoute.key];var defaultTransitionPreset=mode==='modal'?ModalTransition:DefaultTransition;if(headerMode==='screen'){defaultTransitionPreset=_objectSpread(_objectSpread({},defaultTransitionPreset),{},{headerStyleInterpolator:forNoAnimationHeader});}var _ref6=focusedOptions.safeAreaInsets||{},_ref6$top=_ref6.top,top=_ref6$top===void 0?insets.top:_ref6$top,_ref6$right=_ref6.right,right=_ref6$right===void 0?insets.right:_ref6$right,_ref6$bottom=_ref6.bottom,bottom=_ref6$bottom===void 0?insets.bottom:_ref6$bottom,_ref6$left=_ref6.left,left=_ref6$left===void 0?insets.left:_ref6$left;var activeScreensLimit=1;for(var i=scenes.length-1;i>=0;i--){var _scenes$i$descriptor$=scenes[i].descriptor.options.detachPreviousScreen,detachPreviousScreen=_scenes$i$descriptor$===void 0?mode==='modal'?i!==scenes.length-1:true:_scenes$i$descriptor$;if(detachPreviousScreen===false){activeScreensLimit++;}else{break;}}var isFloatHeaderAbsolute=headerMode==='float'?this.state.scenes.slice(-2).some(function(scene){var descriptor=scene.descriptor;var options=descriptor?descriptor.options:{};var headerTransparent=options.headerTransparent,_options$headerShown=options.headerShown,headerShown=_options$headerShown===void 0?true:_options$headerShown;if(headerTransparent||headerShown===false){return true;}return false;}):false;var floatingHeader=headerMode==='float'?React.createElement(React.Fragment,{key:\"header\"},renderHeader({mode:'float',layout:layout,insets:{top:top,right:right,bottom:bottom,left:left},scenes:scenes,getPreviousScene:this.getPreviousScene,getFocusedRoute:this.getFocusedRoute,onContentHeightChange:this.handleHeaderLayout,gestureDirection:focusedOptions.gestureDirection!==undefined?focusedOptions.gestureDirection:defaultTransitionPreset.gestureDirection,styleInterpolator:focusedOptions.headerStyleInterpolator!==undefined?focusedOptions.headerStyleInterpolator:defaultTransitionPreset.headerStyleInterpolator,style:[styles.floating,isFloatHeaderAbsolute&&[{height:focusedHeaderHeight},styles.absolute]]})):null;var isScreensEnabled=(screensEnabled===null||screensEnabled===void 0?void 0:screensEnabled())&&detachInactiveScreens;return React.createElement(React.Fragment,null,isFloatHeaderAbsolute?null:floatingHeader,React.createElement(MaybeScreenContainer,{enabled:isScreensEnabled,style:styles.container,onLayout:this.handleLayout},routes.map(function(route,index,self){var focused=focusedRoute.key===route.key;var gesture=gestures[route.key];var scene=scenes[index];var isScreenActive=1;if(shouldUseActivityState||Platform.OS==='web'){if(index<self.length-activeScreensLimit-1){isScreenActive=STATE_INACTIVE;}else{var sceneForActivity=scenes[self.length-1];var outputValue=index===self.length-1?STATE_ON_TOP:index>=self.length-activeScreensLimit?STATE_TRANSITIONING_OR_BELOW_TOP:STATE_INACTIVE;isScreenActive=sceneForActivity?sceneForActivity.progress.current.interpolate({inputRange:[0,1-EPSILON,1],outputRange:[1,1,outputValue],extrapolate:'clamp'}):STATE_TRANSITIONING_OR_BELOW_TOP;}}else{isScreenActive=scene.progress.next?scene.progress.next.interpolate({inputRange:[0,1-EPSILON,1],outputRange:[1,1,0],extrapolate:'clamp'}):1;}var _ref7=scene.descriptor?scene.descriptor.options:{},safeAreaInsets=_ref7.safeAreaInsets,_ref7$headerShown=_ref7.headerShown,headerShown=_ref7$headerShown===void 0?true:_ref7$headerShown,headerTransparent=_ref7.headerTransparent,cardShadowEnabled=_ref7.cardShadowEnabled,cardOverlayEnabled=_ref7.cardOverlayEnabled,cardOverlay=_ref7.cardOverlay,cardStyle=_ref7.cardStyle,animationEnabled=_ref7.animationEnabled,gestureResponseDistance=_ref7.gestureResponseDistance,gestureVelocityImpact=_ref7.gestureVelocityImpact,_ref7$gestureDirectio=_ref7.gestureDirection,gestureDirection=_ref7$gestureDirectio===void 0?defaultTransitionPreset.gestureDirection:_ref7$gestureDirectio,_ref7$transitionSpec=_ref7.transitionSpec,transitionSpec=_ref7$transitionSpec===void 0?defaultTransitionPreset.transitionSpec:_ref7$transitionSpec,_ref7$cardStyleInterp=_ref7.cardStyleInterpolator,cardStyleInterpolator=_ref7$cardStyleInterp===void 0?animationEnabled===false?forNoAnimationCard:defaultTransitionPreset.cardStyleInterpolator:_ref7$cardStyleInterp,_ref7$headerStyleInte=_ref7.headerStyleInterpolator,headerStyleInterpolator=_ref7$headerStyleInte===void 0?defaultTransitionPreset.headerStyleInterpolator:_ref7$headerStyleInte;var transitionConfig={gestureDirection:gestureDirection,transitionSpec:transitionSpec,cardStyleInterpolator:cardStyleInterpolator,headerStyleInterpolator:headerStyleInterpolator};if(index!==self.length-1){var nextScene=scenes[index+1];if(nextScene){var _ref8=nextScene.descriptor?nextScene.descriptor.options:{},_animationEnabled=_ref8.animationEnabled,_ref8$gestureDirectio=_ref8.gestureDirection,_gestureDirection=_ref8$gestureDirectio===void 0?defaultTransitionPreset.gestureDirection:_ref8$gestureDirectio,_ref8$transitionSpec=_ref8.transitionSpec,_transitionSpec=_ref8$transitionSpec===void 0?defaultTransitionPreset.transitionSpec:_ref8$transitionSpec,_ref8$cardStyleInterp=_ref8.cardStyleInterpolator,_cardStyleInterpolator=_ref8$cardStyleInterp===void 0?_animationEnabled===false?forNoAnimationCard:defaultTransitionPreset.cardStyleInterpolator:_ref8$cardStyleInterp,_ref8$headerStyleInte=_ref8.headerStyleInterpolator,_headerStyleInterpolator=_ref8$headerStyleInte===void 0?defaultTransitionPreset.headerStyleInterpolator:_ref8$headerStyleInte;transitionConfig={gestureDirection:_gestureDirection,transitionSpec:_transitionSpec,cardStyleInterpolator:_cardStyleInterpolator,headerStyleInterpolator:_headerStyleInterpolator};}}var _ref9=safeAreaInsets||{},_ref9$top=_ref9.top,safeAreaInsetTop=_ref9$top===void 0?insets.top:_ref9$top,_ref9$right=_ref9.right,safeAreaInsetRight=_ref9$right===void 0?insets.right:_ref9$right,_ref9$bottom=_ref9.bottom,safeAreaInsetBottom=_ref9$bottom===void 0?insets.bottom:_ref9$bottom,_ref9$left=_ref9.left,safeAreaInsetLeft=_ref9$left===void 0?insets.left:_ref9$left;var headerHeight=headerMode!=='none'&&headerShown!==false?headerHeights[route.key]:0;return React.createElement(MaybeScreen,{key:route.key,style:StyleSheet.absoluteFill,enabled:isScreensEnabled,active:isScreenActive,pointerEvents:\"box-none\"},React.createElement(CardContainer,_extends({index:index,active:index===self.length-1,focused:focused,closing:closingRouteKeys.includes(route.key),layout:layout,gesture:gesture,scene:scene,safeAreaInsetTop:safeAreaInsetTop,safeAreaInsetRight:safeAreaInsetRight,safeAreaInsetBottom:safeAreaInsetBottom,safeAreaInsetLeft:safeAreaInsetLeft,cardOverlay:cardOverlay,cardOverlayEnabled:cardOverlayEnabled,cardShadowEnabled:cardShadowEnabled,cardStyle:cardStyle,onPageChangeStart:onPageChangeStart,onPageChangeConfirm:onPageChangeConfirm,onPageChangeCancel:onPageChangeCancel,onGestureStart:onGestureStart,onGestureCancel:onGestureCancel,onGestureEnd:onGestureEnd,gestureResponseDistance:gestureResponseDistance,headerHeight:headerHeight,isParentHeaderShown:isParentHeaderShown,onHeaderHeightChange:_this2.handleHeaderLayout,getPreviousScene:_this2.getPreviousScene,getFocusedRoute:_this2.getFocusedRoute,mode:mode,headerMode:headerMode,headerShown:headerShown,hasAbsoluteHeader:isFloatHeaderAbsolute&&!headerTransparent,renderHeader:renderHeader,renderScene:renderScene,onOpenRoute:onOpenRoute,onCloseRoute:onCloseRoute,onTransitionStart:onTransitionStart,onTransitionEnd:onTransitionEnd,gestureEnabled:index!==0&&getGesturesEnabled({route:route}),gestureVelocityImpact:gestureVelocityImpact},transitionConfig)));})),isFloatHeaderAbsolute?floatingHeader:null);}}],[{key:\"getDerivedStateFromProps\",value:function getDerivedStateFromProps(props,state){if(props.routes===state.routes&&props.descriptors===state.descriptors){return null;}var gestures=props.routes.reduce(function(acc,curr){var descriptor=props.descriptors[curr.key];var _ref10=(descriptor===null||descriptor===void 0?void 0:descriptor.options)||{},animationEnabled=_ref10.animationEnabled;acc[curr.key]=state.gestures[curr.key]||new Animated.Value(props.openingRouteKeys.includes(curr.key)&&animationEnabled!==false?getDistanceFromOptions(props.mode,state.layout,descriptor):0);return acc;},{});return{routes:props.routes,scenes:props.routes.map(function(route,index,self){var previousRoute=self[index-1];var nextRoute=self[index+1];var oldScene=state.scenes[index];var currentGesture=gestures[route.key];var previousGesture=previousRoute?gestures[previousRoute.key]:undefined;var nextGesture=nextRoute?gestures[nextRoute.key]:undefined;var descriptor=props.descriptors[route.key]||state.descriptors[route.key]||(oldScene?oldScene.descriptor:FALLBACK_DESCRIPTOR);var nextDescriptor=props.descriptors[nextRoute===null||nextRoute===void 0?void 0:nextRoute.key]||state.descriptors[nextRoute===null||nextRoute===void 0?void 0:nextRoute.key];var previousDescriptor=props.descriptors[previousRoute===null||previousRoute===void 0?void 0:previousRoute.key]||state.descriptors[previousRoute===null||previousRoute===void 0?void 0:previousRoute.key];var scene={route:route,descriptor:descriptor,progress:{current:getProgressFromGesture(props.mode,currentGesture,state.layout,descriptor),next:nextGesture?getProgressFromGesture(props.mode,nextGesture,state.layout,nextDescriptor):undefined,previous:previousGesture?getProgressFromGesture(props.mode,previousGesture,state.layout,previousDescriptor):undefined},__memo:[route,state.layout,descriptor,nextDescriptor,previousDescriptor,currentGesture,nextGesture,previousGesture]};if(oldScene&&scene.__memo.every(function(it,i){return oldScene.__memo[i]===it;})){return oldScene;}return scene;}),gestures:gestures,descriptors:props.descriptors,headerHeights:getHeaderHeights(props.routes,props.insets,props.isParentHeaderShown,state.descriptors,state.layout,state.headerHeights)};}}]);return CardStack;}(React.Component);export{CardStack as default};var styles=StyleSheet.create({container:{flex:1},absolute:{position:'absolute',top:0,left:0,right:0},floating:{zIndex:1}});","map":{"version":3,"sources":["CardStack.tsx"],"names":["forNoAnimation","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","options","getHeaderHeights","descriptors","curr","style","StyleSheet","height","previous","safeAreaInsets","headerStatusBarHeight","isParentHeaderShown","top","acc","getDefaultHeaderHeight","getDistanceFromOptions","gestureDirection","mode","ModalTransition","DefaultTransition","getDistanceForDirection","getProgressFromGesture","distance","width","Math","layout","inputRange","outputRange","React","props","state","gestures","descriptor","animationEnabled","Animated","routes","scenes","previousRoute","self","index","nextRoute","oldScene","currentGesture","route","previousGesture","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","undefined","__memo","headerHeights","constructor","Dimensions","e","previousHeight","getPreviousRoute","previousScene","render","detachInactiveScreens","Platform","shouldUseActivityState","focusedRoute","focusedDescriptor","focusedOptions","focusedHeaderHeight","defaultTransitionPreset","headerMode","headerStyleInterpolator","forNoAnimationHeader","insets","right","bottom","left","activeScreensLimit","i","detachPreviousScreen","isFloatHeaderAbsolute","headerShown","headerTransparent","floatingHeader","renderHeader","getPreviousScene","getFocusedRoute","onContentHeightChange","styleInterpolator","styles","isScreensEnabled","handleLayout","focused","gesture","isScreenActive","sceneForActivity","outputValue","extrapolate","transitionSpec","cardStyleInterpolator","transitionConfig","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","headerHeight","closingRouteKeys","getGesturesEnabled","gestureVelocityImpact","container","flex","absolute","position","floating","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport { screensEnabled } from 'react-native-screens';\n\nimport {\n  MaybeScreenContainer,\n  MaybeScreen,\n  shouldUseActivityState,\n} from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type {\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  isParentHeaderShown: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: (force: boolean) => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const style: any = StyleSheet.flatten(options.headerStyle || {});\n\n    const height =\n      typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : safeAreaInsets.top,\n    } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    mode,\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        props.isParentHeaderShown,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: { height, width },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          props.isParentHeaderShown,\n          state.descriptors,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      isParentHeaderShown,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      // Enable on new versions of `react-native-screens`\n      // On older versions of `react-native-screens`, there's an issue with screens not being responsive to user interaction.\n      detachInactiveScreens = Platform.OS === 'web' || shouldUseActivityState,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = mode === 'modal'\n          ? i !== scenes.length - 1\n          : true,\n      } = scenes[i].descriptor.options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        break;\n      }\n    }\n\n    const isFloatHeaderAbsolute =\n      headerMode === 'float'\n        ? this.state.scenes.slice(-2).some((scene) => {\n            const { descriptor } = scene;\n            const options = descriptor ? descriptor.options : {};\n            const { headerTransparent, headerShown = true } = options;\n\n            if (headerTransparent || headerShown === false) {\n              return true;\n            }\n\n            return false;\n          })\n        : false;\n\n    const floatingHeader =\n      headerMode === 'float' ? (\n        <React.Fragment key=\"header\">\n          {renderHeader({\n            mode: 'float',\n            layout,\n            insets: { top, right, bottom, left },\n            scenes,\n            getPreviousScene: this.getPreviousScene,\n            getFocusedRoute: this.getFocusedRoute,\n            onContentHeightChange: this.handleHeaderLayout,\n            gestureDirection:\n              focusedOptions.gestureDirection !== undefined\n                ? focusedOptions.gestureDirection\n                : defaultTransitionPreset.gestureDirection,\n            styleInterpolator:\n              focusedOptions.headerStyleInterpolator !== undefined\n                ? focusedOptions.headerStyleInterpolator\n                : defaultTransitionPreset.headerStyleInterpolator,\n            style: [\n              styles.floating,\n              isFloatHeaderAbsolute && [\n                // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n                { height: focusedHeaderHeight },\n                styles.absolute,\n              ],\n            ],\n          })}\n        </React.Fragment>\n      ) : null;\n\n    const isScreensEnabled = screensEnabled?.() && detachInactiveScreens;\n\n    return (\n      <React.Fragment>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={isScreensEnabled}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (shouldUseActivityState || Platform.OS === 'web') {\n              if (index < self.length - activeScreensLimit - 1) {\n                // screen should be inactive because it is too deep in the stack\n                isScreenActive = STATE_INACTIVE;\n              } else {\n                const sceneForActivity = scenes[self.length - 1];\n                const outputValue =\n                  index === self.length - 1\n                    ? STATE_ON_TOP // the screen is on top after the transition\n                    : index >= self.length - activeScreensLimit\n                    ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                    : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n                isScreenActive = sceneForActivity\n                  ? sceneForActivity.progress.current.interpolate({\n                      inputRange: [0, 1 - EPSILON, 1],\n                      outputRange: [1, 1, outputValue],\n                      extrapolate: 'clamp',\n                    })\n                  : STATE_TRANSITIONING_OR_BELOW_TOP;\n              }\n            } else {\n              isScreenActive = scene.progress.next\n                ? scene.progress.next.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, 0],\n                    extrapolate: 'clamp',\n                  })\n                : 1;\n            }\n\n            const {\n              safeAreaInsets,\n              headerShown = true,\n              headerTransparent,\n              cardShadowEnabled,\n              cardOverlayEnabled,\n              cardOverlay,\n              cardStyle,\n              animationEnabled,\n              gestureResponseDistance,\n              gestureVelocityImpact,\n              gestureDirection = defaultTransitionPreset.gestureDirection,\n              transitionSpec = defaultTransitionPreset.transitionSpec,\n              cardStyleInterpolator = animationEnabled === false\n                ? forNoAnimationCard\n                : defaultTransitionPreset.cardStyleInterpolator,\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n            } = scene.descriptor\n              ? scene.descriptor.options\n              : ({} as StackNavigationOptions);\n\n            let transitionConfig = {\n              gestureDirection,\n              transitionSpec,\n              cardStyleInterpolator,\n              headerStyleInterpolator,\n            };\n\n            // When a screen is not the last, it should use next screen's transition config\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n            // For example combining a slide and a modal transition would look wrong otherwise\n            // With this approach, combining different transition styles in the same navigator mostly looks right\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n            // but majority of the transitions look alright\n            if (index !== self.length - 1) {\n              const nextScene = scenes[index + 1];\n\n              if (nextScene) {\n                const {\n                  animationEnabled,\n                  gestureDirection = defaultTransitionPreset.gestureDirection,\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\n                  cardStyleInterpolator = animationEnabled === false\n                    ? forNoAnimationCard\n                    : defaultTransitionPreset.cardStyleInterpolator,\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                } = nextScene.descriptor\n                  ? nextScene.descriptor.options\n                  : ({} as StackNavigationOptions);\n\n                transitionConfig = {\n                  gestureDirection,\n                  transitionSpec,\n                  cardStyleInterpolator,\n                  headerStyleInterpolator,\n                };\n              }\n            }\n\n            const {\n              top: safeAreaInsetTop = insets.top,\n              right: safeAreaInsetRight = insets.right,\n              bottom: safeAreaInsetBottom = insets.bottom,\n              left: safeAreaInsetLeft = insets.left,\n            } = safeAreaInsets || {};\n\n            const headerHeight =\n              headerMode !== 'none' && headerShown !== false\n                ? headerHeights[route.key]\n                : 0;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={isScreensEnabled}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  cardOverlay={cardOverlay}\n                  cardOverlayEnabled={cardOverlayEnabled}\n                  cardShadowEnabled={cardShadowEnabled}\n                  cardStyle={cardStyle}\n                  onPageChangeStart={onPageChangeStart}\n                  onPageChangeConfirm={onPageChangeConfirm}\n                  onPageChangeCancel={onPageChangeCancel}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  gestureResponseDistance={gestureResponseDistance}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  mode={mode}\n                  headerMode={headerMode}\n                  headerShown={headerShown}\n                  hasAbsoluteHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\n                  gestureVelocityImpact={gestureVelocityImpact}\n                  {...transitionConfig}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </React.Fragment>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}