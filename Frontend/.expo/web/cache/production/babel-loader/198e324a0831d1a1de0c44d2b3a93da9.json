{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{CodedError,NativeModulesProxy}from'@unimodules/core';import Platform from\"react-native-web/dist/exports/Platform\";import NativeModules from\"react-native-web/dist/exports/NativeModules\";import{AppOwnership,ExecutionEnvironment,UserInterfaceIdiom}from\"./Constants.types\";import ExponentConstants from\"./ExponentConstants\";export{AppOwnership,ExecutionEnvironment,UserInterfaceIdiom};if(!ExponentConstants){console.warn(\"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\");}var manifest=null;if(NativeModulesProxy.ExpoUpdates){var updatesManifest;if(NativeModulesProxy.ExpoUpdates.manifest){updatesManifest=NativeModulesProxy.ExpoUpdates.manifest;}else if(NativeModulesProxy.ExpoUpdates.manifestString){updatesManifest=JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);}if(updatesManifest&&Object.keys(updatesManifest).length>0){manifest=updatesManifest;}}if(NativeModules.EXDevLauncher){var devLauncherManifest;if(NativeModules.EXDevLauncher.manifestString){devLauncherManifest=JSON.parse(NativeModules.EXDevLauncher.manifestString);}if(devLauncherManifest&&Object.keys(devLauncherManifest).length>0){manifest=devLauncherManifest;}}if(!manifest&&ExponentConstants&&ExponentConstants.manifest){manifest=ExponentConstants.manifest;if(typeof manifest==='string'){manifest=JSON.parse(manifest);}}var _ref=ExponentConstants||{},name=_ref.name,appOwnership=_ref.appOwnership,nativeConstants=_objectWithoutProperties(_ref,[\"name\",\"appOwnership\"]);var warnedAboutInstallationId=false;var warnedAboutDeviceId=false;var warnedAboutLinkingUrl=false;var constants=_objectSpread(_objectSpread({},nativeConstants),{},{appOwnership:appOwnership!=null?appOwnership:null,get installationId(){if(!warnedAboutInstallationId){console.warn(\"Constants.installationId has been deprecated in favor of generating and storing your own ID. Implement it using expo-application's androidId on Android and a storage API such as expo-secure-store on iOS and localStorage on the web. This API will be removed in SDK 44.\");warnedAboutInstallationId=true;}return nativeConstants.installationId;},get deviceId(){if(!warnedAboutDeviceId){console.warn(\"Constants.deviceId has been deprecated in favor of generating and storing your own ID. This API will be removed in SDK 44.\");warnedAboutDeviceId=true;}return nativeConstants.installationId;},get linkingUrl(){if(!warnedAboutLinkingUrl){console.warn(\"Constants.linkingUrl has been renamed to Constants.linkingUri. Consider using the Linking API directly. Constants.linkingUrl will be removed in SDK 44.\");warnedAboutLinkingUrl=true;}return nativeConstants.linkingUri;}});function getManifest(){var suppressWarning=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(!manifest){var invalidManifestType=manifest===null?'null':'undefined';if(nativeConstants.executionEnvironment===ExecutionEnvironment.Bare&&Platform.OS!=='web'){if(!suppressWarning){console.warn(\"Constants.manifest is \"+invalidManifestType+\" because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.\");}}else if(nativeConstants.executionEnvironment===ExecutionEnvironment.StoreClient||nativeConstants.executionEnvironment===ExecutionEnvironment.Standalone){throw new CodedError('ERR_CONSTANTS_MANIFEST_UNAVAILABLE',\"Constants.manifest is \"+invalidManifestType+\", must be an object.\");}}return manifest;}Object.defineProperties(constants,{manifest:{enumerable:true,get:function get(){return getManifest();},set:function set(value){manifest=value;}},__unsafeNoWarnManifest:{enumerable:true,get:function get(){return getManifest(true);}}});export default constants;","map":{"version":3,"sources":["../src/Constants.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError, NativeModulesProxy } from '@unimodules/core';\nimport { Platform, NativeModules } from 'react-native';\n\nimport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n} from './Constants.types';\nimport ExponentConstants from './ExponentConstants';\n\nexport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n};\n\nif (!ExponentConstants) {\n  console.warn(\n    \"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\"\n  );\n}\n\nlet manifest = null;\n// If expo-updates defines a non-empty manifest, prefer that one\nif (NativeModulesProxy.ExpoUpdates) {\n  let updatesManifest;\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    manifest = updatesManifest;\n  }\n}\n\n// If dev-launcher defines a non-empty manifest, prefer that one\nif (NativeModules.EXDevLauncher) {\n  let devLauncherManifest;\n  if (NativeModules.EXDevLauncher.manifestString) {\n    devLauncherManifest = JSON.parse(NativeModules.EXDevLauncher.manifestString);\n  }\n\n  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {\n    manifest = devLauncherManifest;\n  }\n}\n\n// Fall back to ExponentConstants.manifest if we don't have one from Updates\nif (!manifest && ExponentConstants && ExponentConstants.manifest) {\n  manifest = ExponentConstants.manifest;\n  // On Android we pass the manifest in JSON form so this step is necessary\n  if (typeof manifest === 'string') {\n    manifest = JSON.parse(manifest);\n  }\n}\n\nconst { name, appOwnership, ...nativeConstants } = (ExponentConstants || {}) as any;\n\nlet warnedAboutInstallationId = false;\nlet warnedAboutDeviceId = false;\nlet warnedAboutLinkingUrl = false;\n\nconst constants = {\n  ...nativeConstants,\n  // Ensure this is null in bare workflow\n  appOwnership: appOwnership ?? null,\n  // Deprecated fields\n  get installationId() {\n    if (!warnedAboutInstallationId) {\n      console.warn(\n        `Constants.installationId has been deprecated in favor of generating and storing your own ID. Implement it using expo-application's androidId on Android and a storage API such as expo-secure-store on iOS and localStorage on the web. This API will be removed in SDK 44.`\n      );\n      warnedAboutInstallationId = true;\n    }\n    return nativeConstants.installationId;\n  },\n  // Legacy aliases\n  get deviceId() {\n    if (!warnedAboutDeviceId) {\n      console.warn(\n        `Constants.deviceId has been deprecated in favor of generating and storing your own ID. This API will be removed in SDK 44.`\n      );\n      warnedAboutDeviceId = true;\n    }\n    return nativeConstants.installationId;\n  },\n  get linkingUrl() {\n    if (!warnedAboutLinkingUrl) {\n      console.warn(\n        `Constants.linkingUrl has been renamed to Constants.linkingUri. Consider using the Linking API directly. Constants.linkingUrl will be removed in SDK 44.`\n      );\n      warnedAboutLinkingUrl = true;\n    }\n    return nativeConstants.linkingUri;\n  },\n} as Constants;\n\nfunction getManifest(suppressWarning = false) {\n  if (!manifest) {\n    const invalidManifestType = manifest === null ? 'null' : 'undefined';\n    if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Bare &&\n      Platform.OS !== 'web'\n    ) {\n      if (!suppressWarning) {\n        console.warn(\n          `Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`\n        );\n      }\n    } else if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient ||\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone\n    ) {\n      // If we somehow get here, this is a truly exceptional state to be in.\n      // Constants.manifest should *always* be defined in those contexts.\n      throw new CodedError(\n        'ERR_CONSTANTS_MANIFEST_UNAVAILABLE',\n        `Constants.manifest is ${invalidManifestType}, must be an object.`\n      );\n    }\n  }\n  return manifest;\n}\n\nObject.defineProperties(constants, {\n  manifest: {\n    enumerable: true,\n    get() {\n      return getManifest();\n    },\n    // This setter is only useful to mock the value for tests\n    set(value) {\n      manifest = value;\n    },\n  },\n  /**\n   * Use `manifest` property by default.\n   * This property is only used for internal purposes.\n   * It behaves similarly to the original one, but suppresses warning upon no manifest available.\n   * `expo-asset` uses it to prevent users from seeing mentioned warning.\n   */\n  __unsafeNoWarnManifest: {\n    enumerable: true,\n    get() {\n      return getManifest(true);\n    },\n  },\n});\n\nexport default constants as Constants;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}