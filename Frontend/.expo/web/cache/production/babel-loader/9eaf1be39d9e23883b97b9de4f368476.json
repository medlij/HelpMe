{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import*as React from'react';export var SUPPRESS_STATE_ACCESS_WARNING={value:false};export default function useRouteCache(routes){var cache=React.useMemo(function(){return{current:new Map()};},[]);if(process.env.NODE_ENV==='production'){return routes;}cache.current=routes.reduce(function(acc,route){var previous=cache.current.get(route);if(previous){acc.set(route,previous);}else{var proxy=_objectSpread({},route);Object.defineProperty(proxy,'state',{get:function get(){if(!SUPPRESS_STATE_ACCESS_WARNING.value){console.warn(\"Accessing the 'state' property of the 'route' object is not supported. If you want to get the focused route name, use the 'getFocusedRouteNameFromRoute' helper instead: https://reactnavigation.org/docs/screen-options-resolution/#setting-parent-screen-options-based-on-child-navigators-state\");}return route.state;}});acc.set(route,proxy);}return acc;},new Map());return Array.from(cache.current.values());}","map":{"version":3,"sources":["useRouteCache.tsx"],"names":["SUPPRESS_STATE_ACCESS_WARNING","value","cache","current","process","previous","acc","proxy","route","Object","get","console","Array"],"mappings":"i2BAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,CAeA,MAAO,IAAMA,CAAAA,6BAA6B,CAAG,CAAEC,KAAK,CAAE,KAAT,CAAtC,CAMP,cAAe,SAAA,CAAA,aAAA,CAAA,MAAA,CAEb,CAEA,GAAMC,CAAAA,KAAK,CAAG,KAAK,CAAL,OAAA,CAAc,iBAAO,CAAEC,OAAO,CAAE,GAAA,CAAA,GAAA,EAAX,CAAP,EAAd,CAAd,EAAc,CAAd,CAEA,GAAIC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,GAAJ,YAAA,CAA2C,CAEzC,MAAA,CAAA,MAAA,CACD,CAEDF,KAAK,CAALA,OAAAA,CAAgB,MAAM,CAAN,MAAA,CAAc,SAAA,GAAA,CAAA,KAAA,CAAgB,CAC5C,GAAMG,CAAAA,QAAQ,CAAGH,KAAK,CAALA,OAAAA,CAAAA,GAAAA,CAAjB,KAAiBA,CAAjB,CAEA,GAAA,QAAA,CAAc,CAEZI,GAAG,CAAHA,GAAAA,CAAAA,KAAAA,CAAAA,QAAAA,EAFF,CAAA,IAGO,CACL,GAAMC,CAAAA,KAAK,kBAAQC,KAAR,CAAX,CAEAC,MAAM,CAANA,cAAAA,CAAAA,KAAAA,CAAAA,OAAAA,CAAsC,CACpCC,GADoC,eAC9B,CACJ,GAAI,CAACV,6BAA6B,CAAlC,KAAA,CAA0C,CACxCW,OAAO,CAAPA,IAAAA,CAAAA,oSAAAA,EAGD,CAED,MAAOH,CAAAA,KAAK,CAAZ,KAAA,CACD,CATmC,CAAtCC,EAYAH,GAAG,CAAHA,GAAAA,CAAAA,KAAAA,CAAAA,KAAAA,EACD,CAED,MAAA,CAAA,GAAA,CAxBc,CAAA,CAyBb,GAzBHJ,CAAAA,GAyBG,EAzBa,CAAhBA,CA2BA,MAAOU,CAAAA,KAAK,CAALA,IAAAA,CAAWV,KAAK,CAALA,OAAAA,CAAlB,MAAkBA,EAAXU,CAAP,CACD","sourcesContent":["import * as React from 'react';\nimport type {\n  ParamListBase,\n  NavigationState,\n  Route,\n} from '@react-navigation/routers';\nimport type { RouteProp } from './types';\n\ntype RouteCache = Map<Route<string>, RouteProp<ParamListBase, string>>;\n\n/**\n * Utilites such as `getFocusedRouteNameFromRoute` need to access state.\n * So we need a way to suppress the warning for those use cases.\n * This is fine since they are internal utilities and this is not public API.\n */\nexport const SUPPRESS_STATE_ACCESS_WARNING = { value: false };\n\n/**\n * Hook to cache route props for each screen in the navigator.\n * This lets add warnings and modifications to the route object but keep references between renders.\n */\nexport default function useRouteCache<State extends NavigationState>(\n  routes: State['routes']\n) {\n  // Cache object which holds route objects for each screen\n  const cache = React.useMemo(() => ({ current: new Map() as RouteCache }), []);\n\n  if (process.env.NODE_ENV === 'production') {\n    // We don't want the overhead of creating extra maps every render in prod\n    return routes;\n  }\n\n  cache.current = routes.reduce((acc, route) => {\n    const previous = cache.current.get(route);\n\n    if (previous) {\n      // If a cached route object already exists, reuse it\n      acc.set(route, previous);\n    } else {\n      const proxy = { ...route };\n\n      Object.defineProperty(proxy, 'state', {\n        get() {\n          if (!SUPPRESS_STATE_ACCESS_WARNING.value) {\n            console.warn(\n              \"Accessing the 'state' property of the 'route' object is not supported. If you want to get the focused route name, use the 'getFocusedRouteNameFromRoute' helper instead: https://reactnavigation.org/docs/screen-options-resolution/#setting-parent-screen-options-based-on-child-navigators-state\"\n            );\n          }\n\n          return route.state;\n        },\n      });\n\n      acc.set(route, proxy);\n    }\n\n    return acc;\n  }, new Map() as RouteCache);\n\n  return Array.from(cache.current.values());\n}\n"]},"metadata":{},"sourceType":"module"}